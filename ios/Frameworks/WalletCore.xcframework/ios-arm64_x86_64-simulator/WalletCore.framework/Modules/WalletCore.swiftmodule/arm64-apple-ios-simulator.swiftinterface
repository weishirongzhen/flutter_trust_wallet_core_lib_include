// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name WalletCore
import Foundation
import Swift
import SwiftProtobuf
@_exported import WalletCore
import _Concurrency
public struct AES {
  public static func encryptCBC(key: Foundation.Data, data: Foundation.Data, iv: Foundation.Data, mode: WalletCore.AESPaddingMode) -> Foundation.Data?
  public static func decryptCBC(key: Foundation.Data, data: Foundation.Data, iv: Foundation.Data, mode: WalletCore.AESPaddingMode) -> Foundation.Data?
  public static func encryptCTR(key: Foundation.Data, data: Foundation.Data, iv: Foundation.Data) -> Foundation.Data?
  public static func decryptCTR(key: Foundation.Data, data: Foundation.Data, iv: Foundation.Data) -> Foundation.Data?
}
public enum AESPaddingMode : Swift.UInt32, Swift.CaseIterable {
  case zero
  case pkcs7
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [WalletCore.AESPaddingMode]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [WalletCore.AESPaddingMode] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
extension WalletCore.Account : Swift.Equatable {
  public static func == (lhs: WalletCore.Account, rhs: WalletCore.Account) -> Swift.Bool
}
extension WalletCore.Account : Swift.Hashable {
  final public func hash(into hasher: inout Swift.Hasher)
  final public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.Account : Swift.Codable {
  final public func encode(to encoder: Swift.Encoder) throws
  convenience public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers final public class Account {
  final public var address: Swift.String {
    get
  }
  final public var derivation: WalletCore.Derivation {
    get
  }
  final public var derivationPath: Swift.String {
    get
  }
  final public var publicKey: Swift.String {
    get
  }
  final public var extendedPublicKey: Swift.String {
    get
  }
  final public var coin: WalletCore.CoinType {
    get
  }
  public init(address: Swift.String, coin: WalletCore.CoinType, derivation: WalletCore.Derivation, derivationPath: Swift.String, publicKey: Swift.String, extendedPublicKey: Swift.String)
  @objc deinit
}
public protocol Address : Swift.CustomStringConvertible {
}
extension WalletCore.AnyAddress : Swift.Equatable {
}
public typealias AeternitySigningInput = WalletCore.TW_Aeternity_Proto_SigningInput
public typealias AeternitySigningOutput = WalletCore.TW_Aeternity_Proto_SigningOutput
public struct TW_Aeternity_Proto_SigningInput {
  public var fromAddress: Swift.String
  public var toAddress: Swift.String
  public var amount: Foundation.Data
  public var fee: Foundation.Data
  public var payload: Swift.String
  public var ttl: Swift.UInt64
  public var nonce: Swift.UInt64
  public var privateKey: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Aeternity_Proto_SigningOutput {
  public var encoded: Swift.String
  public var signature: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_Aeternity_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Aeternity_Proto_SigningInput, rhs: WalletCore.TW_Aeternity_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Aeternity_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Aeternity_Proto_SigningOutput, rhs: WalletCore.TW_Aeternity_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public typealias AionSigningInput = WalletCore.TW_Aion_Proto_SigningInput
public typealias AionSigningOutput = WalletCore.TW_Aion_Proto_SigningOutput
public struct TW_Aion_Proto_SigningInput {
  public var nonce: Foundation.Data
  public var gasPrice: Foundation.Data
  public var gasLimit: Foundation.Data
  public var toAddress: Swift.String
  public var amount: Foundation.Data
  public var payload: Foundation.Data
  public var privateKey: Foundation.Data
  public var timestamp: Swift.UInt64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Aion_Proto_SigningOutput {
  public var encoded: Foundation.Data
  public var signature: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_Aion_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Aion_Proto_SigningInput, rhs: WalletCore.TW_Aion_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Aion_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Aion_Proto_SigningOutput, rhs: WalletCore.TW_Aion_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public typealias AlgorandTransfer = WalletCore.TW_Algorand_Proto_Transfer
public typealias AlgorandAssetTransfer = WalletCore.TW_Algorand_Proto_AssetTransfer
public typealias AlgorandAssetOptIn = WalletCore.TW_Algorand_Proto_AssetOptIn
public typealias AlgorandSigningInput = WalletCore.TW_Algorand_Proto_SigningInput
public typealias AlgorandSigningOutput = WalletCore.TW_Algorand_Proto_SigningOutput
public struct TW_Algorand_Proto_Transfer {
  public var toAddress: Swift.String
  public var amount: Swift.UInt64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Algorand_Proto_AssetTransfer {
  public var toAddress: Swift.String
  public var amount: Swift.UInt64
  public var assetID: Swift.UInt64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Algorand_Proto_AssetOptIn {
  public var assetID: Swift.UInt64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Algorand_Proto_SigningInput {
  public var genesisID: Swift.String
  public var genesisHash: Foundation.Data
  public var note: Foundation.Data
  public var privateKey: Foundation.Data
  public var firstRound: Swift.UInt64
  public var lastRound: Swift.UInt64
  public var fee: Swift.UInt64
  public var messageOneof: WalletCore.TW_Algorand_Proto_SigningInput.OneOf_MessageOneof?
  public var transfer: WalletCore.TW_Algorand_Proto_Transfer {
    get
    set
  }
  public var assetTransfer: WalletCore.TW_Algorand_Proto_AssetTransfer {
    get
    set
  }
  public var assetOptIn: WalletCore.TW_Algorand_Proto_AssetOptIn {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_MessageOneof : Swift.Equatable {
    case transfer(WalletCore.TW_Algorand_Proto_Transfer)
    case assetTransfer(WalletCore.TW_Algorand_Proto_AssetTransfer)
    case assetOptIn(WalletCore.TW_Algorand_Proto_AssetOptIn)
    public static func == (a: WalletCore.TW_Algorand_Proto_SigningInput.OneOf_MessageOneof, b: WalletCore.TW_Algorand_Proto_SigningInput.OneOf_MessageOneof) -> Swift.Bool
  }
  public init()
}
public struct TW_Algorand_Proto_SigningOutput {
  public var encoded: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_Algorand_Proto_Transfer : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Algorand_Proto_Transfer, rhs: WalletCore.TW_Algorand_Proto_Transfer) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Algorand_Proto_AssetTransfer : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Algorand_Proto_AssetTransfer, rhs: WalletCore.TW_Algorand_Proto_AssetTransfer) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Algorand_Proto_AssetOptIn : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Algorand_Proto_AssetOptIn, rhs: WalletCore.TW_Algorand_Proto_AssetOptIn) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Algorand_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Algorand_Proto_SigningInput, rhs: WalletCore.TW_Algorand_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Algorand_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Algorand_Proto_SigningOutput, rhs: WalletCore.TW_Algorand_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class AnyAddress : WalletCore.Address {
  public static func == (lhs: WalletCore.AnyAddress, rhs: WalletCore.AnyAddress) -> Swift.Bool
  public static func isValid(string: Swift.String, coin: WalletCore.CoinType) -> Swift.Bool
  final public var description: Swift.String {
    get
  }
  final public var coin: WalletCore.CoinType {
    get
  }
  final public var data: Foundation.Data {
    get
  }
  public init?(string: Swift.String, coin: WalletCore.CoinType)
  public init(publicKey: WalletCore.PublicKey, coin: WalletCore.CoinType)
  @objc deinit
}
public typealias SigningInput = SwiftProtobuf.Message
public typealias SigningOutput = SwiftProtobuf.Message
@_hasMissingDesignatedInitializers final public class AnySigner {
  public static func sign<SigningOutput>(input: WalletCore.SigningInput, coin: WalletCore.CoinType) -> SigningOutput where SigningOutput : SwiftProtobuf.Message
  public static func nativeSign(data: Foundation.Data, coin: WalletCore.CoinType) -> Foundation.Data
  public static func supportsJSON(coin: WalletCore.CoinType) -> Swift.Bool
  public static func signJSON(_ json: Swift.String, key: Foundation.Data, coin: WalletCore.CoinType) -> Swift.String
  public static func plan<TransactionPlan>(input: WalletCore.SigningInput, coin: WalletCore.CoinType) -> TransactionPlan where TransactionPlan : SwiftProtobuf.Message
  public static func nativePlan(data: Foundation.Data, coin: WalletCore.CoinType) -> Foundation.Data
  @objc deinit
}
public struct Base58 {
  public static func encode(data: Foundation.Data) -> Swift.String
  public static func encodeNoCheck(data: Foundation.Data) -> Swift.String
  public static func decode(string: Swift.String) -> Foundation.Data?
  public static func decodeNoCheck(string: Swift.String) -> Foundation.Data?
}
public typealias BinanceTransaction = WalletCore.TW_Binance_Proto_Transaction
public typealias BinanceSignature = WalletCore.TW_Binance_Proto_Signature
public typealias BinanceTradeOrder = WalletCore.TW_Binance_Proto_TradeOrder
public typealias BinanceCancelTradeOrder = WalletCore.TW_Binance_Proto_CancelTradeOrder
public typealias BinanceSendOrder = WalletCore.TW_Binance_Proto_SendOrder
public typealias BinanceTokenIssueOrder = WalletCore.TW_Binance_Proto_TokenIssueOrder
public typealias BinanceTokenMintOrder = WalletCore.TW_Binance_Proto_TokenMintOrder
public typealias BinanceTokenBurnOrder = WalletCore.TW_Binance_Proto_TokenBurnOrder
public typealias BinanceTokenFreezeOrder = WalletCore.TW_Binance_Proto_TokenFreezeOrder
public typealias BinanceTokenUnfreezeOrder = WalletCore.TW_Binance_Proto_TokenUnfreezeOrder
public typealias BinanceHTLTOrder = WalletCore.TW_Binance_Proto_HTLTOrder
public typealias BinanceDepositHTLTOrder = WalletCore.TW_Binance_Proto_DepositHTLTOrder
public typealias BinanceClaimHTLOrder = WalletCore.TW_Binance_Proto_ClaimHTLOrder
public typealias BinanceRefundHTLTOrder = WalletCore.TW_Binance_Proto_RefundHTLTOrder
public typealias BinanceTransferOut = WalletCore.TW_Binance_Proto_TransferOut
public typealias BinanceSideChainDelegate = WalletCore.TW_Binance_Proto_SideChainDelegate
public typealias BinanceSideChainRedelegate = WalletCore.TW_Binance_Proto_SideChainRedelegate
public typealias BinanceSideChainUndelegate = WalletCore.TW_Binance_Proto_SideChainUndelegate
public typealias BinanceTimeLockOrder = WalletCore.TW_Binance_Proto_TimeLockOrder
public typealias BinanceTimeRelockOrder = WalletCore.TW_Binance_Proto_TimeRelockOrder
public typealias BinanceTimeUnlockOrder = WalletCore.TW_Binance_Proto_TimeUnlockOrder
public typealias BinanceSigningInput = WalletCore.TW_Binance_Proto_SigningInput
public typealias BinanceSigningOutput = WalletCore.TW_Binance_Proto_SigningOutput
public struct TW_Binance_Proto_Transaction {
  public var msgs: [Foundation.Data]
  public var signatures: [Foundation.Data]
  public var memo: Swift.String
  public var source: Swift.Int64
  public var data: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Binance_Proto_Signature {
  public var pubKey: Foundation.Data
  public var signature: Foundation.Data
  public var accountNumber: Swift.Int64
  public var sequence: Swift.Int64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public struct PubKey {
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public init()
}
public struct TW_Binance_Proto_TradeOrder {
  public var sender: Foundation.Data
  public var id: Swift.String
  public var symbol: Swift.String
  public var ordertype: Swift.Int64
  public var side: Swift.Int64
  public var price: Swift.Int64
  public var quantity: Swift.Int64
  public var timeinforce: Swift.Int64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Binance_Proto_CancelTradeOrder {
  public var sender: Foundation.Data
  public var symbol: Swift.String
  public var refid: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Binance_Proto_SendOrder {
  public var inputs: [WalletCore.TW_Binance_Proto_SendOrder.Input]
  public var outputs: [WalletCore.TW_Binance_Proto_SendOrder.Output]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public struct Token {
    public var denom: Swift.String
    public var amount: Swift.Int64
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct Input {
    public var address: Foundation.Data
    public var coins: [WalletCore.TW_Binance_Proto_SendOrder.Token]
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct Output {
    public var address: Foundation.Data
    public var coins: [WalletCore.TW_Binance_Proto_SendOrder.Token]
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public init()
}
public struct TW_Binance_Proto_TokenIssueOrder {
  public var from: Foundation.Data
  public var name: Swift.String
  public var symbol: Swift.String
  public var totalSupply: Swift.Int64
  public var mintable: Swift.Bool
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Binance_Proto_TokenMintOrder {
  public var from: Foundation.Data
  public var symbol: Swift.String
  public var amount: Swift.Int64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Binance_Proto_TokenBurnOrder {
  public var from: Foundation.Data
  public var symbol: Swift.String
  public var amount: Swift.Int64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Binance_Proto_TokenFreezeOrder {
  public var from: Foundation.Data
  public var symbol: Swift.String
  public var amount: Swift.Int64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Binance_Proto_TokenUnfreezeOrder {
  public var from: Foundation.Data
  public var symbol: Swift.String
  public var amount: Swift.Int64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Binance_Proto_HTLTOrder {
  public var from: Foundation.Data
  public var to: Foundation.Data
  public var recipientOtherChain: Swift.String
  public var senderOtherChain: Swift.String
  public var randomNumberHash: Foundation.Data
  public var timestamp: Swift.Int64
  public var amount: [WalletCore.TW_Binance_Proto_SendOrder.Token]
  public var expectedIncome: Swift.String
  public var heightSpan: Swift.Int64
  public var crossChain: Swift.Bool
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Binance_Proto_DepositHTLTOrder {
  public var from: Foundation.Data
  public var amount: [WalletCore.TW_Binance_Proto_SendOrder.Token]
  public var swapID: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Binance_Proto_ClaimHTLOrder {
  public var from: Foundation.Data
  public var swapID: Foundation.Data
  public var randomNumber: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Binance_Proto_RefundHTLTOrder {
  public var from: Foundation.Data
  public var swapID: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Binance_Proto_TransferOut {
  public var from: Foundation.Data
  public var to: Foundation.Data
  public var amount: WalletCore.TW_Binance_Proto_SendOrder.Token {
    get
    set
  }
  public var hasAmount: Swift.Bool {
    get
  }
  public mutating func clearAmount()
  public var expireTime: Swift.Int64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Binance_Proto_SideChainDelegate {
  public var delegatorAddr: Foundation.Data
  public var validatorAddr: Foundation.Data
  public var delegation: WalletCore.TW_Binance_Proto_SendOrder.Token {
    get
    set
  }
  public var hasDelegation: Swift.Bool {
    get
  }
  public mutating func clearDelegation()
  public var chainID: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Binance_Proto_SideChainRedelegate {
  public var delegatorAddr: Foundation.Data
  public var validatorSrcAddr: Foundation.Data
  public var validatorDstAddr: Foundation.Data
  public var amount: WalletCore.TW_Binance_Proto_SendOrder.Token {
    get
    set
  }
  public var hasAmount: Swift.Bool {
    get
  }
  public mutating func clearAmount()
  public var chainID: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Binance_Proto_SideChainUndelegate {
  public var delegatorAddr: Foundation.Data
  public var validatorAddr: Foundation.Data
  public var amount: WalletCore.TW_Binance_Proto_SendOrder.Token {
    get
    set
  }
  public var hasAmount: Swift.Bool {
    get
  }
  public mutating func clearAmount()
  public var chainID: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Binance_Proto_TimeLockOrder {
  public var fromAddress: Foundation.Data
  public var description_p: Swift.String
  public var amount: [WalletCore.TW_Binance_Proto_SendOrder.Token]
  public var lockTime: Swift.Int64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Binance_Proto_TimeRelockOrder {
  public var fromAddress: Foundation.Data
  public var id: Swift.Int64
  public var description_p: Swift.String
  public var amount: [WalletCore.TW_Binance_Proto_SendOrder.Token]
  public var lockTime: Swift.Int64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Binance_Proto_TimeUnlockOrder {
  public var fromAddress: Foundation.Data
  public var id: Swift.Int64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Binance_Proto_SigningInput {
  public var chainID: Swift.String
  public var accountNumber: Swift.Int64
  public var sequence: Swift.Int64
  public var source: Swift.Int64
  public var memo: Swift.String
  public var privateKey: Foundation.Data
  public var orderOneof: WalletCore.TW_Binance_Proto_SigningInput.OneOf_OrderOneof?
  public var tradeOrder: WalletCore.TW_Binance_Proto_TradeOrder {
    get
    set
  }
  public var cancelTradeOrder: WalletCore.TW_Binance_Proto_CancelTradeOrder {
    get
    set
  }
  public var sendOrder: WalletCore.TW_Binance_Proto_SendOrder {
    get
    set
  }
  public var freezeOrder: WalletCore.TW_Binance_Proto_TokenFreezeOrder {
    get
    set
  }
  public var unfreezeOrder: WalletCore.TW_Binance_Proto_TokenUnfreezeOrder {
    get
    set
  }
  public var htltOrder: WalletCore.TW_Binance_Proto_HTLTOrder {
    get
    set
  }
  public var depositHtltOrder: WalletCore.TW_Binance_Proto_DepositHTLTOrder {
    get
    set
  }
  public var claimHtltOrder: WalletCore.TW_Binance_Proto_ClaimHTLOrder {
    get
    set
  }
  public var refundHtltOrder: WalletCore.TW_Binance_Proto_RefundHTLTOrder {
    get
    set
  }
  public var issueOrder: WalletCore.TW_Binance_Proto_TokenIssueOrder {
    get
    set
  }
  public var mintOrder: WalletCore.TW_Binance_Proto_TokenMintOrder {
    get
    set
  }
  public var burnOrder: WalletCore.TW_Binance_Proto_TokenBurnOrder {
    get
    set
  }
  public var transferOutOrder: WalletCore.TW_Binance_Proto_TransferOut {
    get
    set
  }
  public var sideDelegateOrder: WalletCore.TW_Binance_Proto_SideChainDelegate {
    get
    set
  }
  public var sideRedelegateOrder: WalletCore.TW_Binance_Proto_SideChainRedelegate {
    get
    set
  }
  public var sideUndelegateOrder: WalletCore.TW_Binance_Proto_SideChainUndelegate {
    get
    set
  }
  public var timeLockOrder: WalletCore.TW_Binance_Proto_TimeLockOrder {
    get
    set
  }
  public var timeRelockOrder: WalletCore.TW_Binance_Proto_TimeRelockOrder {
    get
    set
  }
  public var timeUnlockOrder: WalletCore.TW_Binance_Proto_TimeUnlockOrder {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_OrderOneof : Swift.Equatable {
    case tradeOrder(WalletCore.TW_Binance_Proto_TradeOrder)
    case cancelTradeOrder(WalletCore.TW_Binance_Proto_CancelTradeOrder)
    case sendOrder(WalletCore.TW_Binance_Proto_SendOrder)
    case freezeOrder(WalletCore.TW_Binance_Proto_TokenFreezeOrder)
    case unfreezeOrder(WalletCore.TW_Binance_Proto_TokenUnfreezeOrder)
    case htltOrder(WalletCore.TW_Binance_Proto_HTLTOrder)
    case depositHtltOrder(WalletCore.TW_Binance_Proto_DepositHTLTOrder)
    case claimHtltOrder(WalletCore.TW_Binance_Proto_ClaimHTLOrder)
    case refundHtltOrder(WalletCore.TW_Binance_Proto_RefundHTLTOrder)
    case issueOrder(WalletCore.TW_Binance_Proto_TokenIssueOrder)
    case mintOrder(WalletCore.TW_Binance_Proto_TokenMintOrder)
    case burnOrder(WalletCore.TW_Binance_Proto_TokenBurnOrder)
    case transferOutOrder(WalletCore.TW_Binance_Proto_TransferOut)
    case sideDelegateOrder(WalletCore.TW_Binance_Proto_SideChainDelegate)
    case sideRedelegateOrder(WalletCore.TW_Binance_Proto_SideChainRedelegate)
    case sideUndelegateOrder(WalletCore.TW_Binance_Proto_SideChainUndelegate)
    case timeLockOrder(WalletCore.TW_Binance_Proto_TimeLockOrder)
    case timeRelockOrder(WalletCore.TW_Binance_Proto_TimeRelockOrder)
    case timeUnlockOrder(WalletCore.TW_Binance_Proto_TimeUnlockOrder)
    public static func == (a: WalletCore.TW_Binance_Proto_SigningInput.OneOf_OrderOneof, b: WalletCore.TW_Binance_Proto_SigningInput.OneOf_OrderOneof) -> Swift.Bool
  }
  public init()
}
public struct TW_Binance_Proto_SigningOutput {
  public var encoded: Foundation.Data
  public var error: WalletCore.TW_Common_Proto_SigningError
  public var errorMessage: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_Binance_Proto_Transaction : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Binance_Proto_Transaction, rhs: WalletCore.TW_Binance_Proto_Transaction) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Binance_Proto_Signature : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Binance_Proto_Signature, rhs: WalletCore.TW_Binance_Proto_Signature) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Binance_Proto_Signature.PubKey : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Binance_Proto_Signature.PubKey, rhs: WalletCore.TW_Binance_Proto_Signature.PubKey) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Binance_Proto_TradeOrder : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Binance_Proto_TradeOrder, rhs: WalletCore.TW_Binance_Proto_TradeOrder) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Binance_Proto_CancelTradeOrder : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Binance_Proto_CancelTradeOrder, rhs: WalletCore.TW_Binance_Proto_CancelTradeOrder) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Binance_Proto_SendOrder : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Binance_Proto_SendOrder, rhs: WalletCore.TW_Binance_Proto_SendOrder) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Binance_Proto_SendOrder.Token : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Binance_Proto_SendOrder.Token, rhs: WalletCore.TW_Binance_Proto_SendOrder.Token) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Binance_Proto_SendOrder.Input : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Binance_Proto_SendOrder.Input, rhs: WalletCore.TW_Binance_Proto_SendOrder.Input) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Binance_Proto_SendOrder.Output : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Binance_Proto_SendOrder.Output, rhs: WalletCore.TW_Binance_Proto_SendOrder.Output) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Binance_Proto_TokenIssueOrder : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Binance_Proto_TokenIssueOrder, rhs: WalletCore.TW_Binance_Proto_TokenIssueOrder) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Binance_Proto_TokenMintOrder : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Binance_Proto_TokenMintOrder, rhs: WalletCore.TW_Binance_Proto_TokenMintOrder) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Binance_Proto_TokenBurnOrder : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Binance_Proto_TokenBurnOrder, rhs: WalletCore.TW_Binance_Proto_TokenBurnOrder) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Binance_Proto_TokenFreezeOrder : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Binance_Proto_TokenFreezeOrder, rhs: WalletCore.TW_Binance_Proto_TokenFreezeOrder) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Binance_Proto_TokenUnfreezeOrder : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Binance_Proto_TokenUnfreezeOrder, rhs: WalletCore.TW_Binance_Proto_TokenUnfreezeOrder) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Binance_Proto_HTLTOrder : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Binance_Proto_HTLTOrder, rhs: WalletCore.TW_Binance_Proto_HTLTOrder) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Binance_Proto_DepositHTLTOrder : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Binance_Proto_DepositHTLTOrder, rhs: WalletCore.TW_Binance_Proto_DepositHTLTOrder) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Binance_Proto_ClaimHTLOrder : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Binance_Proto_ClaimHTLOrder, rhs: WalletCore.TW_Binance_Proto_ClaimHTLOrder) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Binance_Proto_RefundHTLTOrder : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Binance_Proto_RefundHTLTOrder, rhs: WalletCore.TW_Binance_Proto_RefundHTLTOrder) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Binance_Proto_TransferOut : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Binance_Proto_TransferOut, rhs: WalletCore.TW_Binance_Proto_TransferOut) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Binance_Proto_SideChainDelegate : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Binance_Proto_SideChainDelegate, rhs: WalletCore.TW_Binance_Proto_SideChainDelegate) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Binance_Proto_SideChainRedelegate : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Binance_Proto_SideChainRedelegate, rhs: WalletCore.TW_Binance_Proto_SideChainRedelegate) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Binance_Proto_SideChainUndelegate : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Binance_Proto_SideChainUndelegate, rhs: WalletCore.TW_Binance_Proto_SideChainUndelegate) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Binance_Proto_TimeLockOrder : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Binance_Proto_TimeLockOrder, rhs: WalletCore.TW_Binance_Proto_TimeLockOrder) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Binance_Proto_TimeRelockOrder : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Binance_Proto_TimeRelockOrder, rhs: WalletCore.TW_Binance_Proto_TimeRelockOrder) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Binance_Proto_TimeUnlockOrder : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Binance_Proto_TimeUnlockOrder, rhs: WalletCore.TW_Binance_Proto_TimeUnlockOrder) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Binance_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Binance_Proto_SigningInput, rhs: WalletCore.TW_Binance_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Binance_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Binance_Proto_SigningOutput, rhs: WalletCore.TW_Binance_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public typealias BitcoinTransaction = WalletCore.TW_Bitcoin_Proto_Transaction
public typealias BitcoinTransactionInput = WalletCore.TW_Bitcoin_Proto_TransactionInput
public typealias BitcoinOutPoint = WalletCore.TW_Bitcoin_Proto_OutPoint
public typealias BitcoinTransactionOutput = WalletCore.TW_Bitcoin_Proto_TransactionOutput
public typealias BitcoinUnspentTransaction = WalletCore.TW_Bitcoin_Proto_UnspentTransaction
public typealias BitcoinSigningInput = WalletCore.TW_Bitcoin_Proto_SigningInput
public typealias BitcoinTransactionPlan = WalletCore.TW_Bitcoin_Proto_TransactionPlan
public typealias BitcoinSigningOutput = WalletCore.TW_Bitcoin_Proto_SigningOutput
public typealias BitcoinHashPublicKey = WalletCore.TW_Bitcoin_Proto_HashPublicKey
public typealias BitcoinPreSigningOutput = WalletCore.TW_Bitcoin_Proto_PreSigningOutput
public struct TW_Bitcoin_Proto_Transaction {
  public var version: Swift.Int32
  public var lockTime: Swift.UInt32
  public var inputs: [WalletCore.TW_Bitcoin_Proto_TransactionInput]
  public var outputs: [WalletCore.TW_Bitcoin_Proto_TransactionOutput]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Bitcoin_Proto_TransactionInput {
  public var previousOutput: WalletCore.TW_Bitcoin_Proto_OutPoint {
    get
    set
  }
  public var hasPreviousOutput: Swift.Bool {
    get
  }
  public mutating func clearPreviousOutput()
  public var sequence: Swift.UInt32
  public var script: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Bitcoin_Proto_OutPoint {
  public var hash: Foundation.Data
  public var index: Swift.UInt32
  public var sequence: Swift.UInt32
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Bitcoin_Proto_TransactionOutput {
  public var value: Swift.Int64
  public var script: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Bitcoin_Proto_UnspentTransaction {
  public var outPoint: WalletCore.TW_Bitcoin_Proto_OutPoint {
    get
    set
  }
  public var hasOutPoint: Swift.Bool {
    get
  }
  public mutating func clearOutPoint()
  public var script: Foundation.Data
  public var amount: Swift.Int64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Bitcoin_Proto_SigningInput {
  public var hashType: Swift.UInt32 {
    get
    set
  }
  public var amount: Swift.Int64 {
    get
    set
  }
  public var byteFee: Swift.Int64 {
    get
    set
  }
  public var toAddress: Swift.String {
    get
    set
  }
  public var changeAddress: Swift.String {
    get
    set
  }
  public var privateKey: [Foundation.Data] {
    get
    set
  }
  public var scripts: Swift.Dictionary<Swift.String, Foundation.Data> {
    get
    set
  }
  public var utxo: [WalletCore.TW_Bitcoin_Proto_UnspentTransaction] {
    get
    set
  }
  public var useMaxAmount: Swift.Bool {
    get
    set
  }
  public var coinType: Swift.UInt32 {
    get
    set
  }
  public var plan: WalletCore.TW_Bitcoin_Proto_TransactionPlan {
    get
    set
  }
  public var hasPlan: Swift.Bool {
    get
  }
  public mutating func clearPlan()
  public var lockTime: Swift.UInt32 {
    get
    set
  }
  public var outputOpReturn: Foundation.Data {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Bitcoin_Proto_TransactionPlan {
  public var amount: Swift.Int64
  public var availableAmount: Swift.Int64
  public var fee: Swift.Int64
  public var change: Swift.Int64
  public var utxos: [WalletCore.TW_Bitcoin_Proto_UnspentTransaction]
  public var branchID: Foundation.Data
  public var error: WalletCore.TW_Common_Proto_SigningError
  public var outputOpReturn: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Bitcoin_Proto_SigningOutput {
  public var transaction: WalletCore.TW_Bitcoin_Proto_Transaction {
    get
    set
  }
  public var hasTransaction: Swift.Bool {
    get
  }
  public mutating func clearTransaction()
  public var encoded: Foundation.Data
  public var transactionID: Swift.String
  public var error: WalletCore.TW_Common_Proto_SigningError
  public var errorMessage: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Bitcoin_Proto_HashPublicKey {
  public var dataHash: Foundation.Data
  public var publicKeyHash: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Bitcoin_Proto_PreSigningOutput {
  public var hashPublicKeys: [WalletCore.TW_Bitcoin_Proto_HashPublicKey]
  public var error: WalletCore.TW_Common_Proto_SigningError
  public var errorMessage: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_Bitcoin_Proto_Transaction : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Bitcoin_Proto_Transaction, rhs: WalletCore.TW_Bitcoin_Proto_Transaction) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Bitcoin_Proto_TransactionInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Bitcoin_Proto_TransactionInput, rhs: WalletCore.TW_Bitcoin_Proto_TransactionInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Bitcoin_Proto_OutPoint : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Bitcoin_Proto_OutPoint, rhs: WalletCore.TW_Bitcoin_Proto_OutPoint) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Bitcoin_Proto_TransactionOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Bitcoin_Proto_TransactionOutput, rhs: WalletCore.TW_Bitcoin_Proto_TransactionOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Bitcoin_Proto_UnspentTransaction : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Bitcoin_Proto_UnspentTransaction, rhs: WalletCore.TW_Bitcoin_Proto_UnspentTransaction) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Bitcoin_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Bitcoin_Proto_SigningInput, rhs: WalletCore.TW_Bitcoin_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Bitcoin_Proto_TransactionPlan : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Bitcoin_Proto_TransactionPlan, rhs: WalletCore.TW_Bitcoin_Proto_TransactionPlan) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Bitcoin_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Bitcoin_Proto_SigningOutput, rhs: WalletCore.TW_Bitcoin_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Bitcoin_Proto_HashPublicKey : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Bitcoin_Proto_HashPublicKey, rhs: WalletCore.TW_Bitcoin_Proto_HashPublicKey) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Bitcoin_Proto_PreSigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Bitcoin_Proto_PreSigningOutput, rhs: WalletCore.TW_Bitcoin_Proto_PreSigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.BitcoinAddress : Swift.Equatable {
  final public var base58String: Swift.String {
    get
  }
  final public func hash(into hasher: inout Swift.Hasher)
  public static func compatibleAddress(publicKey: WalletCore.PublicKey, prefix: Swift.UInt8) -> WalletCore.BitcoinAddress
}
@_hasMissingDesignatedInitializers final public class BitcoinAddress : WalletCore.Address {
  public static func == (lhs: WalletCore.BitcoinAddress, rhs: WalletCore.BitcoinAddress) -> Swift.Bool
  public static func isValid(data: Foundation.Data) -> Swift.Bool
  public static func isValidString(string: Swift.String) -> Swift.Bool
  final public var description: Swift.String {
    get
  }
  final public var prefix: Swift.UInt8 {
    get
  }
  final public var keyhash: Foundation.Data {
    get
  }
  public init?(string: Swift.String)
  public init?(data: Foundation.Data)
  public init?(publicKey: WalletCore.PublicKey, prefix: Swift.UInt8)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class BitcoinScript {
  public static func == (lhs: WalletCore.BitcoinScript, rhs: WalletCore.BitcoinScript) -> Swift.Bool
  public static func buildPayToPublicKey(pubkey: Foundation.Data) -> WalletCore.BitcoinScript
  public static func buildPayToPublicKeyHash(hash: Foundation.Data) -> WalletCore.BitcoinScript
  public static func buildPayToScriptHash(scriptHash: Foundation.Data) -> WalletCore.BitcoinScript
  public static func buildPayToWitnessPubkeyHash(hash: Foundation.Data) -> WalletCore.BitcoinScript
  public static func buildPayToWitnessScriptHash(scriptHash: Foundation.Data) -> WalletCore.BitcoinScript
  public static func lockScriptForAddress(address: Swift.String, coin: WalletCore.CoinType) -> WalletCore.BitcoinScript
  public static func hashTypeForCoin(coinType: WalletCore.CoinType) -> Swift.UInt32
  final public var size: Swift.Int {
    get
  }
  final public var data: Foundation.Data {
    get
  }
  final public var scriptHash: Foundation.Data {
    get
  }
  final public var isPayToScriptHash: Swift.Bool {
    get
  }
  final public var isPayToWitnessScriptHash: Swift.Bool {
    get
  }
  final public var isPayToWitnessPublicKeyHash: Swift.Bool {
    get
  }
  final public var isWitnessProgram: Swift.Bool {
    get
  }
  public init()
  public init(data: Foundation.Data)
  public init(script: WalletCore.BitcoinScript)
  @objc deinit
  final public func matchPayToPubkey() -> Foundation.Data?
  final public func matchPayToPubkeyHash() -> Foundation.Data?
  final public func matchPayToScriptHash() -> Foundation.Data?
  final public func matchPayToWitnessPublicKeyHash() -> Foundation.Data?
  final public func matchPayToWitnessScriptHash() -> Foundation.Data?
  final public func encode() -> Foundation.Data
}
extension WalletCore.BitcoinSigHashType {
  public func isSingle() -> Swift.Bool
  public func isNone() -> Swift.Bool
}
public enum BitcoinSigHashType : Swift.UInt32, Swift.CaseIterable {
  case all
  case none
  case single
  case fork
  case forkBTG
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [WalletCore.BitcoinSigHashType]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [WalletCore.BitcoinSigHashType] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public enum Blockchain : Swift.UInt32, Swift.CaseIterable {
  case bitcoin
  case ethereum
  case vechain
  case tron
  case icon
  case binance
  case ripple
  case tezos
  case nimiq
  case stellar
  case aion
  case cosmos
  case theta
  case ontology
  case zilliqa
  case ioTeX
  case eos
  case nano
  case nuls
  case waves
  case aeternity
  case nebulas
  case fio
  case solana
  case harmony
  case near
  case algorand
  case polkadot
  case cardano
  case neo
  case filecoin
  case elrondNetwork
  case oasisNetwork
  case newChain
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [WalletCore.Blockchain]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [WalletCore.Blockchain] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public typealias CardanoOutPoint = WalletCore.TW_Cardano_Proto_OutPoint
public typealias CardanoTokenAmount = WalletCore.TW_Cardano_Proto_TokenAmount
public typealias CardanoTxInput = WalletCore.TW_Cardano_Proto_TxInput
public typealias CardanoTxOutput = WalletCore.TW_Cardano_Proto_TxOutput
public typealias CardanoTransfer = WalletCore.TW_Cardano_Proto_Transfer
public typealias CardanoTransactionPlan = WalletCore.TW_Cardano_Proto_TransactionPlan
public typealias CardanoSigningInput = WalletCore.TW_Cardano_Proto_SigningInput
public typealias CardanoSigningOutput = WalletCore.TW_Cardano_Proto_SigningOutput
public struct TW_Cardano_Proto_OutPoint {
  public var txHash: Foundation.Data
  public var outputIndex: Swift.UInt64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Cardano_Proto_TokenAmount {
  public var policyID: Swift.String
  public var assetName: Swift.String
  public var amount: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Cardano_Proto_TxInput {
  public var outPoint: WalletCore.TW_Cardano_Proto_OutPoint {
    get
    set
  }
  public var hasOutPoint: Swift.Bool {
    get
  }
  public mutating func clearOutPoint()
  public var address: Swift.String
  public var amount: Swift.UInt64
  public var tokenAmount: [WalletCore.TW_Cardano_Proto_TokenAmount]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Cardano_Proto_TxOutput {
  public var address: Swift.String
  public var amount: Swift.UInt64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Cardano_Proto_Transfer {
  public var toAddress: Swift.String
  public var changeAddress: Swift.String
  public var amount: Swift.UInt64
  public var useMaxAmount: Swift.Bool
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Cardano_Proto_TransactionPlan {
  public var amount: Swift.UInt64
  public var availableAmount: Swift.UInt64
  public var fee: Swift.UInt64
  public var change: Swift.UInt64
  public var utxos: [WalletCore.TW_Cardano_Proto_TxInput]
  public var error: WalletCore.TW_Common_Proto_SigningError
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Cardano_Proto_SigningInput {
  public var utxos: [WalletCore.TW_Cardano_Proto_TxInput]
  public var privateKey: [Foundation.Data]
  public var transferMessage: WalletCore.TW_Cardano_Proto_Transfer {
    get
    set
  }
  public var hasTransferMessage: Swift.Bool {
    get
  }
  public mutating func clearTransferMessage()
  public var ttl: Swift.UInt64
  public var plan: WalletCore.TW_Cardano_Proto_TransactionPlan {
    get
    set
  }
  public var hasPlan: Swift.Bool {
    get
  }
  public mutating func clearPlan()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Cardano_Proto_SigningOutput {
  public var encoded: Foundation.Data
  public var txID: Foundation.Data
  public var error: WalletCore.TW_Common_Proto_SigningError
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_Cardano_Proto_OutPoint : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cardano_Proto_OutPoint, rhs: WalletCore.TW_Cardano_Proto_OutPoint) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cardano_Proto_TokenAmount : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cardano_Proto_TokenAmount, rhs: WalletCore.TW_Cardano_Proto_TokenAmount) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cardano_Proto_TxInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cardano_Proto_TxInput, rhs: WalletCore.TW_Cardano_Proto_TxInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cardano_Proto_TxOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cardano_Proto_TxOutput, rhs: WalletCore.TW_Cardano_Proto_TxOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cardano_Proto_Transfer : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cardano_Proto_Transfer, rhs: WalletCore.TW_Cardano_Proto_Transfer) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cardano_Proto_TransactionPlan : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cardano_Proto_TransactionPlan, rhs: WalletCore.TW_Cardano_Proto_TransactionPlan) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cardano_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cardano_Proto_SigningInput, rhs: WalletCore.TW_Cardano_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cardano_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cardano_Proto_SigningOutput, rhs: WalletCore.TW_Cardano_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.CoinType {
  public func address(string: Swift.String) -> WalletCore.AnyAddress?
}
extension WalletCore.CoinType {
  public var blockchain: WalletCore.Blockchain {
    get
  }
  public var purpose: WalletCore.Purpose {
    get
  }
  public var curve: WalletCore.Curve {
    get
  }
  public var xpubVersion: WalletCore.HDVersion {
    get
  }
  public var xprvVersion: WalletCore.HDVersion {
    get
  }
  public var hrp: WalletCore.HRP {
    get
  }
  public var p2pkhPrefix: Swift.UInt8 {
    get
  }
  public var p2shPrefix: Swift.UInt8 {
    get
  }
  public var staticPrefix: Swift.UInt8 {
    get
  }
  public var slip44Id: Swift.UInt32 {
    get
  }
  public var publicKeyType: WalletCore.PublicKeyType {
    get
  }
  public func validate(address: Swift.String) -> Swift.Bool
  public func derivationPath() -> Swift.String
  public func deriveAddress(privateKey: WalletCore.PrivateKey) -> Swift.String
  public func deriveAddressFromPublicKey(publicKey: WalletCore.PublicKey) -> Swift.String
}
public enum CoinType : Swift.UInt32, Swift.CaseIterable {
  case aeternity
  case aion
  case binance
  case bitcoin
  case bitcoinCash
  case bitcoinGold
  case callisto
  case cardano
  case cosmos
  case dash
  case decred
  case digiByte
  case dogecoin
  case eos
  case ethereum
  case ethereumClassic
  case fio
  case goChain
  case groestlcoin
  case icon
  case ioTeX
  case kava
  case kin
  case litecoin
  case monacoin
  case nebulas
  case nuls
  case nano
  case near
  case nimiq
  case ontology
  case poanetwork
  case qtum
  case xrp
  case solana
  case stellar
  case tezos
  case theta
  case thunderToken
  case neo
  case tomoChain
  case tron
  case veChain
  case viacoin
  case wanchain
  case zcash
  case firo
  case zilliqa
  case zelcash
  case ravencoin
  case waves
  case terra
  case harmony
  case algorand
  case kusama
  case polkadot
  case filecoin
  case elrond
  case bandChain
  case smartChainLegacy
  case smartChain
  case oasis
  case polygon
  case thorchain
  case bluzelle
  case optimism
  case arbitrum
  case ecochain
  case avalancheCChain
  case xdai
  case fantom
  case cryptoOrg
  case celo
  case ronin
  case osmosis
  case ecash
  case cronosChain
  case smartBitcoinCash
  case kuCoinCommunityChain
  case boba
  case metis
  case aurora
  case newChain
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [WalletCore.CoinType]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [WalletCore.CoinType] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public struct CoinTypeConfiguration {
  public static func getSymbol(type: WalletCore.CoinType) -> Swift.String
  public static func getDecimals(type: WalletCore.CoinType) -> Swift.Int32
  public static func getTransactionURL(type: WalletCore.CoinType, transactionID: Swift.String) -> Swift.String
  public static func getAccountURL(type: WalletCore.CoinType, accountID: Swift.String) -> Swift.String
  public static func getID(type: WalletCore.CoinType) -> Swift.String
  public static func getName(type: WalletCore.CoinType) -> Swift.String
}
public typealias CommonSigningError = WalletCore.TW_Common_Proto_SigningError
public enum TW_Common_Proto_SigningError : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case ok
  case errorGeneral
  case errorInternal
  case errorLowBalance
  case errorZeroAmountRequested
  case errorMissingPrivateKey
  case errorInvalidPrivateKey
  case errorInvalidAddress
  case errorInvalidUtxo
  case errorInvalidUtxoAmount
  case errorWrongFee
  case errorSigning
  case errorTxTooBig
  case errorMissingInputUtxos
  case errorNotEnoughUtxos
  case errorScriptRedeem
  case errorScriptOutput
  case errorScriptWitnessProgram
  case errorInvalidMemo
  case errorInputParse
  case errorNoSupportN2N
  case errorSignaturesCount
  case errorInvalidParams
  case UNRECOGNIZED(Swift.Int)
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Common_Proto_SigningError : Swift.CaseIterable {
  public static var allCases: [WalletCore.TW_Common_Proto_SigningError]
  public typealias AllCases = [WalletCore.TW_Common_Proto_SigningError]
}
extension WalletCore.TW_Common_Proto_SigningError : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
public typealias CosmosAmount = WalletCore.TW_Cosmos_Proto_Amount
public typealias CosmosFee = WalletCore.TW_Cosmos_Proto_Fee
public typealias CosmosHeight = WalletCore.TW_Cosmos_Proto_Height
public typealias CosmosMessage = WalletCore.TW_Cosmos_Proto_Message
public typealias CosmosSigningInput = WalletCore.TW_Cosmos_Proto_SigningInput
public typealias CosmosSigningOutput = WalletCore.TW_Cosmos_Proto_SigningOutput
public typealias CosmosBroadcastMode = WalletCore.TW_Cosmos_Proto_BroadcastMode
public typealias CosmosSigningMode = WalletCore.TW_Cosmos_Proto_SigningMode
public enum TW_Cosmos_Proto_BroadcastMode : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case block
  case sync
  case async
  case UNRECOGNIZED(Swift.Int)
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cosmos_Proto_BroadcastMode : Swift.CaseIterable {
  public static var allCases: [WalletCore.TW_Cosmos_Proto_BroadcastMode]
  public typealias AllCases = [WalletCore.TW_Cosmos_Proto_BroadcastMode]
}
public enum TW_Cosmos_Proto_SigningMode : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case json
  case protobuf
  case UNRECOGNIZED(Swift.Int)
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cosmos_Proto_SigningMode : Swift.CaseIterable {
  public static var allCases: [WalletCore.TW_Cosmos_Proto_SigningMode]
  public typealias AllCases = [WalletCore.TW_Cosmos_Proto_SigningMode]
}
public struct TW_Cosmos_Proto_Amount {
  public var denom: Swift.String
  public var amount: Swift.Int64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Cosmos_Proto_Fee {
  public var amounts: [WalletCore.TW_Cosmos_Proto_Amount]
  public var gas: Swift.UInt64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Cosmos_Proto_Height {
  public var revisionNumber: Swift.UInt64
  public var revisionHeight: Swift.UInt64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Cosmos_Proto_Message {
  public var messageOneof: WalletCore.TW_Cosmos_Proto_Message.OneOf_MessageOneof?
  public var sendCoinsMessage: WalletCore.TW_Cosmos_Proto_Message.Send {
    get
    set
  }
  public var transferTokensMessage: WalletCore.TW_Cosmos_Proto_Message.Transfer {
    get
    set
  }
  public var stakeMessage: WalletCore.TW_Cosmos_Proto_Message.Delegate {
    get
    set
  }
  public var unstakeMessage: WalletCore.TW_Cosmos_Proto_Message.Undelegate {
    get
    set
  }
  public var restakeMessage: WalletCore.TW_Cosmos_Proto_Message.BeginRedelegate {
    get
    set
  }
  public var withdrawStakeRewardMessage: WalletCore.TW_Cosmos_Proto_Message.WithdrawDelegationReward {
    get
    set
  }
  public var rawJsonMessage: WalletCore.TW_Cosmos_Proto_Message.RawJSON {
    get
    set
  }
  public var wasmTerraExecuteContractTransferMessage: WalletCore.TW_Cosmos_Proto_Message.WasmTerraExecuteContractTransfer {
    get
    set
  }
  public var wasmTerraExecuteContractSendMessage: WalletCore.TW_Cosmos_Proto_Message.WasmTerraExecuteContractSend {
    get
    set
  }
  public var thorchainSendMessage: WalletCore.TW_Cosmos_Proto_Message.THORChainSend {
    get
    set
  }
  public var wasmTerraExecuteContractGeneric: WalletCore.TW_Cosmos_Proto_Message.WasmTerraExecuteContractGeneric {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_MessageOneof : Swift.Equatable {
    case sendCoinsMessage(WalletCore.TW_Cosmos_Proto_Message.Send)
    case transferTokensMessage(WalletCore.TW_Cosmos_Proto_Message.Transfer)
    case stakeMessage(WalletCore.TW_Cosmos_Proto_Message.Delegate)
    case unstakeMessage(WalletCore.TW_Cosmos_Proto_Message.Undelegate)
    case restakeMessage(WalletCore.TW_Cosmos_Proto_Message.BeginRedelegate)
    case withdrawStakeRewardMessage(WalletCore.TW_Cosmos_Proto_Message.WithdrawDelegationReward)
    case rawJsonMessage(WalletCore.TW_Cosmos_Proto_Message.RawJSON)
    case wasmTerraExecuteContractTransferMessage(WalletCore.TW_Cosmos_Proto_Message.WasmTerraExecuteContractTransfer)
    case wasmTerraExecuteContractSendMessage(WalletCore.TW_Cosmos_Proto_Message.WasmTerraExecuteContractSend)
    case thorchainSendMessage(WalletCore.TW_Cosmos_Proto_Message.THORChainSend)
    case wasmTerraExecuteContractGeneric(WalletCore.TW_Cosmos_Proto_Message.WasmTerraExecuteContractGeneric)
    public static func == (a: WalletCore.TW_Cosmos_Proto_Message.OneOf_MessageOneof, b: WalletCore.TW_Cosmos_Proto_Message.OneOf_MessageOneof) -> Swift.Bool
  }
  public struct Send {
    public var fromAddress: Swift.String
    public var toAddress: Swift.String
    public var amounts: [WalletCore.TW_Cosmos_Proto_Amount]
    public var typePrefix: Swift.String
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct Transfer {
    public var sourcePort: Swift.String
    public var sourceChannel: Swift.String
    public var token: WalletCore.TW_Cosmos_Proto_Amount {
      get
      set
    }
    public var hasToken: Swift.Bool {
      get
    }
    public mutating func clearToken()
    public var sender: Swift.String
    public var receiver: Swift.String
    public var timeoutHeight: WalletCore.TW_Cosmos_Proto_Height {
      get
      set
    }
    public var hasTimeoutHeight: Swift.Bool {
      get
    }
    public mutating func clearTimeoutHeight()
    public var timeoutTimestamp: Swift.UInt64
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct Delegate {
    public var delegatorAddress: Swift.String
    public var validatorAddress: Swift.String
    public var amount: WalletCore.TW_Cosmos_Proto_Amount {
      get
      set
    }
    public var hasAmount: Swift.Bool {
      get
    }
    public mutating func clearAmount()
    public var typePrefix: Swift.String
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct Undelegate {
    public var delegatorAddress: Swift.String
    public var validatorAddress: Swift.String
    public var amount: WalletCore.TW_Cosmos_Proto_Amount {
      get
      set
    }
    public var hasAmount: Swift.Bool {
      get
    }
    public mutating func clearAmount()
    public var typePrefix: Swift.String
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct BeginRedelegate {
    public var delegatorAddress: Swift.String
    public var validatorSrcAddress: Swift.String
    public var validatorDstAddress: Swift.String
    public var amount: WalletCore.TW_Cosmos_Proto_Amount {
      get
      set
    }
    public var hasAmount: Swift.Bool {
      get
    }
    public mutating func clearAmount()
    public var typePrefix: Swift.String
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct WithdrawDelegationReward {
    public var delegatorAddress: Swift.String
    public var validatorAddress: Swift.String
    public var typePrefix: Swift.String
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct WasmTerraExecuteContractTransfer {
    public var senderAddress: Swift.String
    public var contractAddress: Swift.String
    public var amount: Foundation.Data
    public var recipientAddress: Swift.String
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct WasmTerraExecuteContractSend {
    public var senderAddress: Swift.String
    public var contractAddress: Swift.String
    public var amount: Foundation.Data
    public var recipientContractAddress: Swift.String
    public var msg: Swift.String
    public var coin: [Swift.String]
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct THORChainSend {
    public var fromAddress: Foundation.Data
    public var toAddress: Foundation.Data
    public var amounts: [WalletCore.TW_Cosmos_Proto_Amount]
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct WasmTerraExecuteContractGeneric {
    public var senderAddress: Swift.String
    public var contractAddress: Swift.String
    public var executeMsg: Swift.String
    public var coins: [WalletCore.TW_Cosmos_Proto_Amount]
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct RawJSON {
    public var type: Swift.String
    public var value: Swift.String
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public init()
}
public struct TW_Cosmos_Proto_SigningInput {
  public var signingMode: WalletCore.TW_Cosmos_Proto_SigningMode
  public var accountNumber: Swift.UInt64
  public var chainID: Swift.String
  public var fee: WalletCore.TW_Cosmos_Proto_Fee {
    get
    set
  }
  public var hasFee: Swift.Bool {
    get
  }
  public mutating func clearFee()
  public var memo: Swift.String
  public var sequence: Swift.UInt64
  public var privateKey: Foundation.Data
  public var messages: [WalletCore.TW_Cosmos_Proto_Message]
  public var mode: WalletCore.TW_Cosmos_Proto_BroadcastMode
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Cosmos_Proto_SigningOutput {
  public var signature: Foundation.Data
  public var json: Swift.String
  public var serialized: Swift.String
  public var error: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_Cosmos_Proto_BroadcastMode : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension WalletCore.TW_Cosmos_Proto_SigningMode : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension WalletCore.TW_Cosmos_Proto_Amount : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cosmos_Proto_Amount, rhs: WalletCore.TW_Cosmos_Proto_Amount) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cosmos_Proto_Fee : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cosmos_Proto_Fee, rhs: WalletCore.TW_Cosmos_Proto_Fee) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cosmos_Proto_Height : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cosmos_Proto_Height, rhs: WalletCore.TW_Cosmos_Proto_Height) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cosmos_Proto_Message : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cosmos_Proto_Message, rhs: WalletCore.TW_Cosmos_Proto_Message) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cosmos_Proto_Message.Send : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cosmos_Proto_Message.Send, rhs: WalletCore.TW_Cosmos_Proto_Message.Send) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cosmos_Proto_Message.Transfer : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cosmos_Proto_Message.Transfer, rhs: WalletCore.TW_Cosmos_Proto_Message.Transfer) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cosmos_Proto_Message.Delegate : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cosmos_Proto_Message.Delegate, rhs: WalletCore.TW_Cosmos_Proto_Message.Delegate) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cosmos_Proto_Message.Undelegate : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cosmos_Proto_Message.Undelegate, rhs: WalletCore.TW_Cosmos_Proto_Message.Undelegate) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cosmos_Proto_Message.BeginRedelegate : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cosmos_Proto_Message.BeginRedelegate, rhs: WalletCore.TW_Cosmos_Proto_Message.BeginRedelegate) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cosmos_Proto_Message.WithdrawDelegationReward : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cosmos_Proto_Message.WithdrawDelegationReward, rhs: WalletCore.TW_Cosmos_Proto_Message.WithdrawDelegationReward) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cosmos_Proto_Message.WasmTerraExecuteContractTransfer : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cosmos_Proto_Message.WasmTerraExecuteContractTransfer, rhs: WalletCore.TW_Cosmos_Proto_Message.WasmTerraExecuteContractTransfer) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cosmos_Proto_Message.WasmTerraExecuteContractSend : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cosmos_Proto_Message.WasmTerraExecuteContractSend, rhs: WalletCore.TW_Cosmos_Proto_Message.WasmTerraExecuteContractSend) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cosmos_Proto_Message.THORChainSend : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cosmos_Proto_Message.THORChainSend, rhs: WalletCore.TW_Cosmos_Proto_Message.THORChainSend) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cosmos_Proto_Message.WasmTerraExecuteContractGeneric : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cosmos_Proto_Message.WasmTerraExecuteContractGeneric, rhs: WalletCore.TW_Cosmos_Proto_Message.WasmTerraExecuteContractGeneric) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cosmos_Proto_Message.RawJSON : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cosmos_Proto_Message.RawJSON, rhs: WalletCore.TW_Cosmos_Proto_Message.RawJSON) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cosmos_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cosmos_Proto_SigningInput, rhs: WalletCore.TW_Cosmos_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cosmos_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cosmos_Proto_SigningOutput, rhs: WalletCore.TW_Cosmos_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum Curve : Swift.UInt32, Swift.CaseIterable, Swift.CustomStringConvertible {
  case secp256k1
  case ed25519
  case ed25519Blake2bNano
  case curve25519
  case nist256p1
  case ed25519Extended
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [WalletCore.Curve]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [WalletCore.Curve] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
extension Foundation.Data {
  public init?(hexString: Swift.String)
  public static func reverse(hexString: Swift.String) -> Foundation.Data
  public var hexString: Swift.String {
    get
  }
}
extension Swift.KeyedDecodingContainerProtocol {
  public func decodeHexString(forKey key: Self.Key) throws -> Foundation.Data
  public func decodeHexStringIfPresent(forKey key: Self.Key) throws -> Foundation.Data?
}
@_hasMissingDesignatedInitializers final public class DataVector {
  final public var size: Swift.Int {
    get
  }
  public init()
  public init(data: Foundation.Data)
  @objc deinit
  final public func add(data: Foundation.Data)
  final public func get(index: Swift.Int) -> Foundation.Data?
}
public typealias DecredTransaction = WalletCore.TW_Decred_Proto_Transaction
public typealias DecredTransactionInput = WalletCore.TW_Decred_Proto_TransactionInput
public typealias DecredTransactionOutput = WalletCore.TW_Decred_Proto_TransactionOutput
public typealias DecredSigningOutput = WalletCore.TW_Decred_Proto_SigningOutput
public struct TW_Decred_Proto_Transaction {
  public var serializeType: Swift.UInt32
  public var version: Swift.UInt32
  public var inputs: [WalletCore.TW_Decred_Proto_TransactionInput]
  public var outputs: [WalletCore.TW_Decred_Proto_TransactionOutput]
  public var lockTime: Swift.UInt32
  public var expiry: Swift.UInt32
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Decred_Proto_TransactionInput {
  public var previousOutput: WalletCore.TW_Bitcoin_Proto_OutPoint {
    get
    set
  }
  public var hasPreviousOutput: Swift.Bool {
    get
  }
  public mutating func clearPreviousOutput()
  public var sequence: Swift.UInt32
  public var valueIn: Swift.Int64
  public var blockHeight: Swift.UInt32
  public var blockIndex: Swift.UInt32
  public var script: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Decred_Proto_TransactionOutput {
  public var value: Swift.Int64
  public var version: Swift.UInt32
  public var script: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Decred_Proto_SigningOutput {
  public var transaction: WalletCore.TW_Decred_Proto_Transaction {
    get
    set
  }
  public var hasTransaction: Swift.Bool {
    get
  }
  public mutating func clearTransaction()
  public var encoded: Foundation.Data
  public var transactionID: Swift.String
  public var error: WalletCore.TW_Common_Proto_SigningError
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_Decred_Proto_Transaction : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Decred_Proto_Transaction, rhs: WalletCore.TW_Decred_Proto_Transaction) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Decred_Proto_TransactionInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Decred_Proto_TransactionInput, rhs: WalletCore.TW_Decred_Proto_TransactionInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Decred_Proto_TransactionOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Decred_Proto_TransactionOutput, rhs: WalletCore.TW_Decred_Proto_TransactionOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Decred_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Decred_Proto_SigningOutput, rhs: WalletCore.TW_Decred_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum Derivation : Swift.UInt32, Swift.CaseIterable {
  case `default`
  case custom
  case bitcoinSegwit
  case bitcoinLegacy
  case litecoinLegacy
  case solanaSolana
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [WalletCore.Derivation]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [WalletCore.Derivation] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
extension WalletCore.DerivationPath {
  public struct Index : Swift.Codable, Swift.Hashable, Swift.CustomStringConvertible {
    public var value: Swift.UInt32
    public var hardened: Swift.Bool
    public var derivationIndex: Swift.UInt32 {
      get
    }
    public init(_ value: Swift.UInt32, hardened: Swift.Bool = true)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (lhs: WalletCore.DerivationPath.Index, rhs: WalletCore.DerivationPath.Index) -> Swift.Bool
    public var description: Swift.String {
      get
    }
    public func encode(to encoder: Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: Swift.Decoder) throws
  }
}
public struct DerivationPath : Swift.Codable, Swift.Hashable, Swift.CustomStringConvertible {
  public var indices: [WalletCore.DerivationPath.Index] {
    get
  }
  public var purpose: WalletCore.Purpose {
    get
    set
  }
  public var coinType: Swift.UInt32 {
    get
    set
  }
  public var account: Swift.UInt32 {
    get
    set
  }
  public var change: Swift.UInt32 {
    get
    set
  }
  public var address: Swift.UInt32 {
    get
    set
  }
  public init(purpose: WalletCore.Purpose, coin: Swift.UInt32, account: Swift.UInt32 = 0, change: Swift.UInt32 = 0, address: Swift.UInt32 = 0)
  public init?(_ string: Swift.String)
  public var description: Swift.String {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: WalletCore.DerivationPath, rhs: WalletCore.DerivationPath) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public typealias EOSAsset = WalletCore.TW_EOS_Proto_Asset
public typealias EOSSigningInput = WalletCore.TW_EOS_Proto_SigningInput
public typealias EOSSigningOutput = WalletCore.TW_EOS_Proto_SigningOutput
public typealias EOSKeyType = WalletCore.TW_EOS_Proto_KeyType
public enum TW_EOS_Proto_KeyType : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case legacy
  case modernk1
  case modernr1
  case UNRECOGNIZED(Swift.Int)
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_EOS_Proto_KeyType : Swift.CaseIterable {
  public static var allCases: [WalletCore.TW_EOS_Proto_KeyType]
  public typealias AllCases = [WalletCore.TW_EOS_Proto_KeyType]
}
public struct TW_EOS_Proto_Asset {
  public var amount: Swift.Int64
  public var decimals: Swift.UInt32
  public var symbol: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_EOS_Proto_SigningInput {
  public var chainID: Foundation.Data
  public var referenceBlockID: Foundation.Data
  public var referenceBlockTime: Swift.Int32
  public var currency: Swift.String
  public var sender: Swift.String
  public var recipient: Swift.String
  public var memo: Swift.String
  public var asset: WalletCore.TW_EOS_Proto_Asset {
    get
    set
  }
  public var hasAsset: Swift.Bool {
    get
  }
  public mutating func clearAsset()
  public var privateKey: Foundation.Data
  public var privateKeyType: WalletCore.TW_EOS_Proto_KeyType
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_EOS_Proto_SigningOutput {
  public var jsonEncoded: Swift.String
  public var error: WalletCore.TW_Common_Proto_SigningError
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_EOS_Proto_KeyType : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension WalletCore.TW_EOS_Proto_Asset : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_EOS_Proto_Asset, rhs: WalletCore.TW_EOS_Proto_Asset) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_EOS_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_EOS_Proto_SigningInput, rhs: WalletCore.TW_EOS_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_EOS_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_EOS_Proto_SigningOutput, rhs: WalletCore.TW_EOS_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public typealias ElrondGenericAction = WalletCore.TW_Elrond_Proto_GenericAction
public typealias ElrondEGLDTransfer = WalletCore.TW_Elrond_Proto_EGLDTransfer
public typealias ElrondESDTTransfer = WalletCore.TW_Elrond_Proto_ESDTTransfer
public typealias ElrondESDTNFTTransfer = WalletCore.TW_Elrond_Proto_ESDTNFTTransfer
public typealias ElrondAccounts = WalletCore.TW_Elrond_Proto_Accounts
public typealias ElrondSigningInput = WalletCore.TW_Elrond_Proto_SigningInput
public typealias ElrondSigningOutput = WalletCore.TW_Elrond_Proto_SigningOutput
public struct TW_Elrond_Proto_GenericAction {
  public var accounts: WalletCore.TW_Elrond_Proto_Accounts {
    get
    set
  }
  public var hasAccounts: Swift.Bool {
    get
  }
  public mutating func clearAccounts()
  public var value: Swift.String
  public var data: Swift.String
  public var version: Swift.UInt32
  public var options: Swift.UInt32
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Elrond_Proto_EGLDTransfer {
  public var accounts: WalletCore.TW_Elrond_Proto_Accounts {
    get
    set
  }
  public var hasAccounts: Swift.Bool {
    get
  }
  public mutating func clearAccounts()
  public var amount: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Elrond_Proto_ESDTTransfer {
  public var accounts: WalletCore.TW_Elrond_Proto_Accounts {
    get
    set
  }
  public var hasAccounts: Swift.Bool {
    get
  }
  public mutating func clearAccounts()
  public var tokenIdentifier: Swift.String
  public var amount: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Elrond_Proto_ESDTNFTTransfer {
  public var accounts: WalletCore.TW_Elrond_Proto_Accounts {
    get
    set
  }
  public var hasAccounts: Swift.Bool {
    get
  }
  public mutating func clearAccounts()
  public var tokenCollection: Swift.String
  public var tokenNonce: Swift.UInt64
  public var amount: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Elrond_Proto_Accounts {
  public var senderNonce: Swift.UInt64
  public var sender: Swift.String
  public var senderUsername: Swift.String
  public var receiver: Swift.String
  public var receiverUsername: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Elrond_Proto_SigningInput {
  public var privateKey: Foundation.Data
  public var chainID: Swift.String
  public var gasPrice: Swift.UInt64
  public var gasLimit: Swift.UInt64
  public var messageOneof: WalletCore.TW_Elrond_Proto_SigningInput.OneOf_MessageOneof?
  public var genericAction: WalletCore.TW_Elrond_Proto_GenericAction {
    get
    set
  }
  public var egldTransfer: WalletCore.TW_Elrond_Proto_EGLDTransfer {
    get
    set
  }
  public var esdtTransfer: WalletCore.TW_Elrond_Proto_ESDTTransfer {
    get
    set
  }
  public var esdtnftTransfer: WalletCore.TW_Elrond_Proto_ESDTNFTTransfer {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_MessageOneof : Swift.Equatable {
    case genericAction(WalletCore.TW_Elrond_Proto_GenericAction)
    case egldTransfer(WalletCore.TW_Elrond_Proto_EGLDTransfer)
    case esdtTransfer(WalletCore.TW_Elrond_Proto_ESDTTransfer)
    case esdtnftTransfer(WalletCore.TW_Elrond_Proto_ESDTNFTTransfer)
    public static func == (a: WalletCore.TW_Elrond_Proto_SigningInput.OneOf_MessageOneof, b: WalletCore.TW_Elrond_Proto_SigningInput.OneOf_MessageOneof) -> Swift.Bool
  }
  public init()
}
public struct TW_Elrond_Proto_SigningOutput {
  public var encoded: Swift.String
  public var signature: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_Elrond_Proto_GenericAction : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Elrond_Proto_GenericAction, rhs: WalletCore.TW_Elrond_Proto_GenericAction) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Elrond_Proto_EGLDTransfer : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Elrond_Proto_EGLDTransfer, rhs: WalletCore.TW_Elrond_Proto_EGLDTransfer) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Elrond_Proto_ESDTTransfer : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Elrond_Proto_ESDTTransfer, rhs: WalletCore.TW_Elrond_Proto_ESDTTransfer) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Elrond_Proto_ESDTNFTTransfer : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Elrond_Proto_ESDTNFTTransfer, rhs: WalletCore.TW_Elrond_Proto_ESDTNFTTransfer) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Elrond_Proto_Accounts : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Elrond_Proto_Accounts, rhs: WalletCore.TW_Elrond_Proto_Accounts) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Elrond_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Elrond_Proto_SigningInput, rhs: WalletCore.TW_Elrond_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Elrond_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Elrond_Proto_SigningOutput, rhs: WalletCore.TW_Elrond_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public typealias EthereumTransaction = WalletCore.TW_Ethereum_Proto_Transaction
public typealias EthereumSigningInput = WalletCore.TW_Ethereum_Proto_SigningInput
public typealias EthereumSigningOutput = WalletCore.TW_Ethereum_Proto_SigningOutput
public typealias EthereumTransactionMode = WalletCore.TW_Ethereum_Proto_TransactionMode
public enum TW_Ethereum_Proto_TransactionMode : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case legacy
  case enveloped
  case UNRECOGNIZED(Swift.Int)
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Ethereum_Proto_TransactionMode : Swift.CaseIterable {
  public static var allCases: [WalletCore.TW_Ethereum_Proto_TransactionMode]
  public typealias AllCases = [WalletCore.TW_Ethereum_Proto_TransactionMode]
}
public struct TW_Ethereum_Proto_Transaction {
  public var transactionOneof: WalletCore.TW_Ethereum_Proto_Transaction.OneOf_TransactionOneof?
  public var transfer: WalletCore.TW_Ethereum_Proto_Transaction.Transfer {
    get
    set
  }
  public var erc20Transfer: WalletCore.TW_Ethereum_Proto_Transaction.ERC20Transfer {
    get
    set
  }
  public var erc20Approve: WalletCore.TW_Ethereum_Proto_Transaction.ERC20Approve {
    get
    set
  }
  public var erc721Transfer: WalletCore.TW_Ethereum_Proto_Transaction.ERC721Transfer {
    get
    set
  }
  public var erc1155Transfer: WalletCore.TW_Ethereum_Proto_Transaction.ERC1155Transfer {
    get
    set
  }
  public var contractGeneric: WalletCore.TW_Ethereum_Proto_Transaction.ContractGeneric {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_TransactionOneof : Swift.Equatable {
    case transfer(WalletCore.TW_Ethereum_Proto_Transaction.Transfer)
    case erc20Transfer(WalletCore.TW_Ethereum_Proto_Transaction.ERC20Transfer)
    case erc20Approve(WalletCore.TW_Ethereum_Proto_Transaction.ERC20Approve)
    case erc721Transfer(WalletCore.TW_Ethereum_Proto_Transaction.ERC721Transfer)
    case erc1155Transfer(WalletCore.TW_Ethereum_Proto_Transaction.ERC1155Transfer)
    case contractGeneric(WalletCore.TW_Ethereum_Proto_Transaction.ContractGeneric)
    public static func == (a: WalletCore.TW_Ethereum_Proto_Transaction.OneOf_TransactionOneof, b: WalletCore.TW_Ethereum_Proto_Transaction.OneOf_TransactionOneof) -> Swift.Bool
  }
  public struct Transfer {
    public var amount: Foundation.Data
    public var data: Foundation.Data
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct ERC20Transfer {
    public var to: Swift.String
    public var amount: Foundation.Data
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct ERC20Approve {
    public var spender: Swift.String
    public var amount: Foundation.Data
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct ERC721Transfer {
    public var from: Swift.String
    public var to: Swift.String
    public var tokenID: Foundation.Data
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct ERC1155Transfer {
    public var from: Swift.String
    public var to: Swift.String
    public var tokenID: Foundation.Data
    public var value: Foundation.Data
    public var data: Foundation.Data
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct ContractGeneric {
    public var amount: Foundation.Data
    public var data: Foundation.Data
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public init()
}
public struct TW_Ethereum_Proto_SigningInput {
  public var chainID: Foundation.Data
  public var nonce: Foundation.Data
  public var txMode: WalletCore.TW_Ethereum_Proto_TransactionMode
  public var gasPrice: Foundation.Data
  public var gasLimit: Foundation.Data
  public var maxInclusionFeePerGas: Foundation.Data
  public var maxFeePerGas: Foundation.Data
  public var toAddress: Swift.String
  public var privateKey: Foundation.Data
  public var transaction: WalletCore.TW_Ethereum_Proto_Transaction {
    get
    set
  }
  public var hasTransaction: Swift.Bool {
    get
  }
  public mutating func clearTransaction()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Ethereum_Proto_SigningOutput {
  public var encoded: Foundation.Data
  public var v: Foundation.Data
  public var r: Foundation.Data
  public var s: Foundation.Data
  public var data: Foundation.Data
  public var error: WalletCore.TW_Common_Proto_SigningError
  public var errorMessage: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_Ethereum_Proto_TransactionMode : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension WalletCore.TW_Ethereum_Proto_Transaction : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Ethereum_Proto_Transaction, rhs: WalletCore.TW_Ethereum_Proto_Transaction) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Ethereum_Proto_Transaction.Transfer : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Ethereum_Proto_Transaction.Transfer, rhs: WalletCore.TW_Ethereum_Proto_Transaction.Transfer) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Ethereum_Proto_Transaction.ERC20Transfer : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Ethereum_Proto_Transaction.ERC20Transfer, rhs: WalletCore.TW_Ethereum_Proto_Transaction.ERC20Transfer) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Ethereum_Proto_Transaction.ERC20Approve : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Ethereum_Proto_Transaction.ERC20Approve, rhs: WalletCore.TW_Ethereum_Proto_Transaction.ERC20Approve) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Ethereum_Proto_Transaction.ERC721Transfer : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Ethereum_Proto_Transaction.ERC721Transfer, rhs: WalletCore.TW_Ethereum_Proto_Transaction.ERC721Transfer) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Ethereum_Proto_Transaction.ERC1155Transfer : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Ethereum_Proto_Transaction.ERC1155Transfer, rhs: WalletCore.TW_Ethereum_Proto_Transaction.ERC1155Transfer) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Ethereum_Proto_Transaction.ContractGeneric : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Ethereum_Proto_Transaction.ContractGeneric, rhs: WalletCore.TW_Ethereum_Proto_Transaction.ContractGeneric) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Ethereum_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Ethereum_Proto_SigningInput, rhs: WalletCore.TW_Ethereum_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Ethereum_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Ethereum_Proto_SigningOutput, rhs: WalletCore.TW_Ethereum_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct EthereumAbi {
  public static func encode(fn: WalletCore.EthereumAbiFunction) -> Foundation.Data
  public static func decodeOutput(fn: WalletCore.EthereumAbiFunction, encoded: Foundation.Data) -> Swift.Bool
  public static func decodeCall(data: Foundation.Data, abi: Swift.String) -> Swift.String?
  public static func encodeTyped(messageJson: Swift.String) -> Foundation.Data
}
@_hasMissingDesignatedInitializers final public class EthereumAbiFunction {
  public init(name: Swift.String)
  @objc deinit
  final public func getType() -> Swift.String
  @discardableResult
  final public func addParamUInt8(val: Swift.UInt8, isOutput: Swift.Bool) -> Swift.Int32
  @discardableResult
  final public func addParamUInt16(val: Swift.UInt16, isOutput: Swift.Bool) -> Swift.Int32
  @discardableResult
  final public func addParamUInt32(val: Swift.UInt32, isOutput: Swift.Bool) -> Swift.Int32
  @discardableResult
  final public func addParamUInt64(val: Swift.UInt64, isOutput: Swift.Bool) -> Swift.Int32
  @discardableResult
  final public func addParamUInt256(val: Foundation.Data, isOutput: Swift.Bool) -> Swift.Int32
  @discardableResult
  final public func addParamUIntN(bits: Swift.Int32, val: Foundation.Data, isOutput: Swift.Bool) -> Swift.Int32
  @discardableResult
  final public func addParamInt8(val: Swift.Int8, isOutput: Swift.Bool) -> Swift.Int32
  @discardableResult
  final public func addParamInt16(val: Swift.Int16, isOutput: Swift.Bool) -> Swift.Int32
  @discardableResult
  final public func addParamInt32(val: Swift.Int32, isOutput: Swift.Bool) -> Swift.Int32
  @discardableResult
  final public func addParamInt64(val: Swift.Int64, isOutput: Swift.Bool) -> Swift.Int32
  @discardableResult
  final public func addParamInt256(val: Foundation.Data, isOutput: Swift.Bool) -> Swift.Int32
  @discardableResult
  final public func addParamIntN(bits: Swift.Int32, val: Foundation.Data, isOutput: Swift.Bool) -> Swift.Int32
  @discardableResult
  final public func addParamBool(val: Swift.Bool, isOutput: Swift.Bool) -> Swift.Int32
  @discardableResult
  final public func addParamString(val: Swift.String, isOutput: Swift.Bool) -> Swift.Int32
  @discardableResult
  final public func addParamAddress(val: Foundation.Data, isOutput: Swift.Bool) -> Swift.Int32
  @discardableResult
  final public func addParamBytes(val: Foundation.Data, isOutput: Swift.Bool) -> Swift.Int32
  @discardableResult
  final public func addParamBytesFix(size: Swift.Int, val: Foundation.Data, isOutput: Swift.Bool) -> Swift.Int32
  @discardableResult
  final public func addParamArray(isOutput: Swift.Bool) -> Swift.Int32
  final public func getParamUInt8(idx: Swift.Int32, isOutput: Swift.Bool) -> Swift.UInt8
  final public func getParamUInt64(idx: Swift.Int32, isOutput: Swift.Bool) -> Swift.UInt64
  final public func getParamUInt256(idx: Swift.Int32, isOutput: Swift.Bool) -> Foundation.Data
  final public func getParamBool(idx: Swift.Int32, isOutput: Swift.Bool) -> Swift.Bool
  final public func getParamString(idx: Swift.Int32, isOutput: Swift.Bool) -> Swift.String
  final public func getParamAddress(idx: Swift.Int32, isOutput: Swift.Bool) -> Foundation.Data
  @discardableResult
  final public func addInArrayParamUInt8(arrayIdx: Swift.Int32, val: Swift.UInt8) -> Swift.Int32
  @discardableResult
  final public func addInArrayParamUInt16(arrayIdx: Swift.Int32, val: Swift.UInt16) -> Swift.Int32
  @discardableResult
  final public func addInArrayParamUInt32(arrayIdx: Swift.Int32, val: Swift.UInt32) -> Swift.Int32
  @discardableResult
  final public func addInArrayParamUInt64(arrayIdx: Swift.Int32, val: Swift.UInt64) -> Swift.Int32
  @discardableResult
  final public func addInArrayParamUInt256(arrayIdx: Swift.Int32, val: Foundation.Data) -> Swift.Int32
  @discardableResult
  final public func addInArrayParamUIntN(arrayIdx: Swift.Int32, bits: Swift.Int32, val: Foundation.Data) -> Swift.Int32
  @discardableResult
  final public func addInArrayParamInt8(arrayIdx: Swift.Int32, val: Swift.Int8) -> Swift.Int32
  @discardableResult
  final public func addInArrayParamInt16(arrayIdx: Swift.Int32, val: Swift.Int16) -> Swift.Int32
  @discardableResult
  final public func addInArrayParamInt32(arrayIdx: Swift.Int32, val: Swift.Int32) -> Swift.Int32
  @discardableResult
  final public func addInArrayParamInt64(arrayIdx: Swift.Int32, val: Swift.Int64) -> Swift.Int32
  @discardableResult
  final public func addInArrayParamInt256(arrayIdx: Swift.Int32, val: Foundation.Data) -> Swift.Int32
  @discardableResult
  final public func addInArrayParamIntN(arrayIdx: Swift.Int32, bits: Swift.Int32, val: Foundation.Data) -> Swift.Int32
  @discardableResult
  final public func addInArrayParamBool(arrayIdx: Swift.Int32, val: Swift.Bool) -> Swift.Int32
  @discardableResult
  final public func addInArrayParamString(arrayIdx: Swift.Int32, val: Swift.String) -> Swift.Int32
  @discardableResult
  final public func addInArrayParamAddress(arrayIdx: Swift.Int32, val: Foundation.Data) -> Swift.Int32
  @discardableResult
  final public func addInArrayParamBytes(arrayIdx: Swift.Int32, val: Foundation.Data) -> Swift.Int32
  @discardableResult
  final public func addInArrayParamBytesFix(arrayIdx: Swift.Int32, size: Swift.Int, val: Foundation.Data) -> Swift.Int32
}
public struct EthereumAbiValue {
  public static func encodeBool(value: Swift.Bool) -> Foundation.Data
  public static func encodeInt32(value: Swift.Int32) -> Foundation.Data
  public static func encodeUInt32(value: Swift.UInt32) -> Foundation.Data
  public static func encodeInt256(value: Foundation.Data) -> Foundation.Data
  public static func encodeUInt256(value: Foundation.Data) -> Foundation.Data
  public static func encodeAddress(value: Foundation.Data) -> Foundation.Data
  public static func encodeString(value: Swift.String) -> Foundation.Data
  public static func encodeBytes(value: Foundation.Data) -> Foundation.Data
  public static func encodeBytesDyn(value: Foundation.Data) -> Foundation.Data
  public static func decodeUInt256(input: Foundation.Data) -> Swift.String
  public static func decodeValue(input: Foundation.Data, type: Swift.String) -> Swift.String
  public static func decodeArray(input: Foundation.Data, type: Swift.String) -> Swift.String
}
public enum EthereumChainID : Swift.UInt32, Swift.CaseIterable {
  case ethereum
  case go
  case poa
  case callisto
  case ethereumClassic
  case veChain
  case thunderToken
  case tomoChain
  case binanceSmartChain
  case polygon
  case wanchain
  case optimism
  case arbitrum
  case heco
  case avalanche
  case xdai
  case fantom
  case celo
  case ronin
  case cronos
  case smartBitcoinCash
  case kuCoinCommunityChain
  case boba
  case metis
  case aurora
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [WalletCore.EthereumChainID]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [WalletCore.EthereumChainID] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public typealias FIOPublicAddress = WalletCore.TW_FIO_Proto_PublicAddress
public typealias FIONewFundsContent = WalletCore.TW_FIO_Proto_NewFundsContent
public typealias FIOAction = WalletCore.TW_FIO_Proto_Action
public typealias FIOChainParams = WalletCore.TW_FIO_Proto_ChainParams
public typealias FIOSigningInput = WalletCore.TW_FIO_Proto_SigningInput
public typealias FIOSigningOutput = WalletCore.TW_FIO_Proto_SigningOutput
public struct TW_FIO_Proto_PublicAddress {
  public var coinSymbol: Swift.String
  public var address: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_FIO_Proto_NewFundsContent {
  public var payeePublicAddress: Swift.String
  public var amount: Swift.String
  public var coinSymbol: Swift.String
  public var memo: Swift.String
  public var hash: Swift.String
  public var offlineURL: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_FIO_Proto_Action {
  public var messageOneof: WalletCore.TW_FIO_Proto_Action.OneOf_MessageOneof?
  public var registerFioAddressMessage: WalletCore.TW_FIO_Proto_Action.RegisterFioAddress {
    get
    set
  }
  public var addPubAddressMessage: WalletCore.TW_FIO_Proto_Action.AddPubAddress {
    get
    set
  }
  public var transferMessage: WalletCore.TW_FIO_Proto_Action.Transfer {
    get
    set
  }
  public var renewFioAddressMessage: WalletCore.TW_FIO_Proto_Action.RenewFioAddress {
    get
    set
  }
  public var newFundsRequestMessage: WalletCore.TW_FIO_Proto_Action.NewFundsRequest {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_MessageOneof : Swift.Equatable {
    case registerFioAddressMessage(WalletCore.TW_FIO_Proto_Action.RegisterFioAddress)
    case addPubAddressMessage(WalletCore.TW_FIO_Proto_Action.AddPubAddress)
    case transferMessage(WalletCore.TW_FIO_Proto_Action.Transfer)
    case renewFioAddressMessage(WalletCore.TW_FIO_Proto_Action.RenewFioAddress)
    case newFundsRequestMessage(WalletCore.TW_FIO_Proto_Action.NewFundsRequest)
    public static func == (a: WalletCore.TW_FIO_Proto_Action.OneOf_MessageOneof, b: WalletCore.TW_FIO_Proto_Action.OneOf_MessageOneof) -> Swift.Bool
  }
  public struct RegisterFioAddress {
    public var fioAddress: Swift.String
    public var ownerFioPublicKey: Swift.String
    public var fee: Swift.UInt64
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct AddPubAddress {
    public var fioAddress: Swift.String
    public var publicAddresses: [WalletCore.TW_FIO_Proto_PublicAddress]
    public var fee: Swift.UInt64
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct Transfer {
    public var payeePublicKey: Swift.String
    public var amount: Swift.UInt64
    public var fee: Swift.UInt64
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct RenewFioAddress {
    public var fioAddress: Swift.String
    public var ownerFioPublicKey: Swift.String
    public var fee: Swift.UInt64
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct NewFundsRequest {
    public var payerFioName: Swift.String
    public var payerFioAddress: Swift.String
    public var payeeFioName: Swift.String
    public var content: WalletCore.TW_FIO_Proto_NewFundsContent {
      get
      set
    }
    public var hasContent: Swift.Bool {
      get
    }
    public mutating func clearContent()
    public var fee: Swift.UInt64
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public init()
}
public struct TW_FIO_Proto_ChainParams {
  public var chainID: Foundation.Data
  public var headBlockNumber: Swift.UInt64
  public var refBlockPrefix: Swift.UInt64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_FIO_Proto_SigningInput {
  public var expiry: Swift.UInt32
  public var chainParams: WalletCore.TW_FIO_Proto_ChainParams {
    get
    set
  }
  public var hasChainParams: Swift.Bool {
    get
  }
  public mutating func clearChainParams()
  public var privateKey: Foundation.Data
  public var tpid: Swift.String
  public var action: WalletCore.TW_FIO_Proto_Action {
    get
    set
  }
  public var hasAction: Swift.Bool {
    get
  }
  public mutating func clearAction()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_FIO_Proto_SigningOutput {
  public var json: Swift.String
  public var error: WalletCore.TW_Common_Proto_SigningError
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_FIO_Proto_PublicAddress : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_FIO_Proto_PublicAddress, rhs: WalletCore.TW_FIO_Proto_PublicAddress) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_FIO_Proto_NewFundsContent : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_FIO_Proto_NewFundsContent, rhs: WalletCore.TW_FIO_Proto_NewFundsContent) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_FIO_Proto_Action : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_FIO_Proto_Action, rhs: WalletCore.TW_FIO_Proto_Action) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_FIO_Proto_Action.RegisterFioAddress : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_FIO_Proto_Action.RegisterFioAddress, rhs: WalletCore.TW_FIO_Proto_Action.RegisterFioAddress) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_FIO_Proto_Action.AddPubAddress : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_FIO_Proto_Action.AddPubAddress, rhs: WalletCore.TW_FIO_Proto_Action.AddPubAddress) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_FIO_Proto_Action.Transfer : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_FIO_Proto_Action.Transfer, rhs: WalletCore.TW_FIO_Proto_Action.Transfer) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_FIO_Proto_Action.RenewFioAddress : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_FIO_Proto_Action.RenewFioAddress, rhs: WalletCore.TW_FIO_Proto_Action.RenewFioAddress) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_FIO_Proto_Action.NewFundsRequest : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_FIO_Proto_Action.NewFundsRequest, rhs: WalletCore.TW_FIO_Proto_Action.NewFundsRequest) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_FIO_Proto_ChainParams : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_FIO_Proto_ChainParams, rhs: WalletCore.TW_FIO_Proto_ChainParams) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_FIO_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_FIO_Proto_SigningInput, rhs: WalletCore.TW_FIO_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_FIO_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_FIO_Proto_SigningOutput, rhs: WalletCore.TW_FIO_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class FIOAccount {
  final public var description: Swift.String {
    get
  }
  public init?(string: Swift.String)
  @objc deinit
}
public typealias FilecoinSigningInput = WalletCore.TW_Filecoin_Proto_SigningInput
public typealias FilecoinSigningOutput = WalletCore.TW_Filecoin_Proto_SigningOutput
public struct TW_Filecoin_Proto_SigningInput {
  public var privateKey: Foundation.Data
  public var to: Swift.String
  public var nonce: Swift.UInt64
  public var value: Foundation.Data
  public var gasLimit: Swift.Int64
  public var gasFeeCap: Foundation.Data
  public var gasPremium: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Filecoin_Proto_SigningOutput {
  public var json: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_Filecoin_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Filecoin_Proto_SigningInput, rhs: WalletCore.TW_Filecoin_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Filecoin_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Filecoin_Proto_SigningOutput, rhs: WalletCore.TW_Filecoin_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class GroestlcoinAddress : WalletCore.Address {
  public static func == (lhs: WalletCore.GroestlcoinAddress, rhs: WalletCore.GroestlcoinAddress) -> Swift.Bool
  public static func isValidString(string: Swift.String) -> Swift.Bool
  final public var description: Swift.String {
    get
  }
  public init?(string: Swift.String)
  public init(publicKey: WalletCore.PublicKey, prefix: Swift.UInt8)
  @objc deinit
}
extension WalletCore.HDVersion {
  public var isPublic: Swift.Bool {
    get
  }
  public var isPrivate: Swift.Bool {
    get
  }
}
public enum HDVersion : Swift.UInt32, Swift.CaseIterable {
  case none
  case xpub
  case xprv
  case ypub
  case yprv
  case zpub
  case zprv
  case ltub
  case ltpv
  case mtub
  case mtpv
  case dpub
  case dprv
  case dgub
  case dgpv
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [WalletCore.HDVersion]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [WalletCore.HDVersion] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
@_hasMissingDesignatedInitializers final public class HDWallet {
  public static func getPublicKeyFromExtended(extended: Swift.String, coin: WalletCore.CoinType, derivationPath: Swift.String) -> WalletCore.PublicKey?
  final public var seed: Foundation.Data {
    get
  }
  final public var mnemonic: Swift.String {
    get
  }
  final public var entropy: Foundation.Data {
    get
  }
  public init?(strength: Swift.Int32, passphrase: Swift.String)
  public init?(mnemonic: Swift.String, passphrase: Swift.String)
  public init?(mnemonic: Swift.String, passphrase: Swift.String, check: Swift.Bool)
  public init?(entropy: Foundation.Data, passphrase: Swift.String)
  @objc deinit
  final public func getMasterKey(curve: WalletCore.Curve) -> WalletCore.PrivateKey
  final public func getKeyForCoin(coin: WalletCore.CoinType) -> WalletCore.PrivateKey
  final public func getAddressForCoin(coin: WalletCore.CoinType) -> Swift.String
  final public func getKey(coin: WalletCore.CoinType, derivationPath: Swift.String) -> WalletCore.PrivateKey
  final public func getDerivedKey(coin: WalletCore.CoinType, account: Swift.UInt32, change: Swift.UInt32, address: Swift.UInt32) -> WalletCore.PrivateKey
  final public func getExtendedPrivateKey(purpose: WalletCore.Purpose, coin: WalletCore.CoinType, version: WalletCore.HDVersion) -> Swift.String
  final public func getExtendedPublicKey(purpose: WalletCore.Purpose, coin: WalletCore.CoinType, version: WalletCore.HDVersion) -> Swift.String
  final public func getExtendedPrivateKeyAccount(purpose: WalletCore.Purpose, coin: WalletCore.CoinType, version: WalletCore.HDVersion, account: Swift.UInt32) -> Swift.String
  final public func getExtendedPublicKeyAccount(purpose: WalletCore.Purpose, coin: WalletCore.CoinType, version: WalletCore.HDVersion, account: Swift.UInt32) -> Swift.String
}
public enum HRP : Swift.UInt32, Swift.CaseIterable, Swift.CustomStringConvertible {
  case unknown
  case bitcoin
  case litecoin
  case viacoin
  case groestlcoin
  case digiByte
  case monacoin
  case cosmos
  case bitcoinCash
  case bitcoinGold
  case ioTeX
  case zilliqa
  case terra
  case cryptoOrg
  case kava
  case oasis
  case bluzelle
  case bandChain
  case elrond
  case binance
  case ecash
  case thorchain
  case harmony
  case cardano
  case qtum
  case osmosis
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [WalletCore.HRP]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [WalletCore.HRP] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public typealias HarmonySigningInput = WalletCore.TW_Harmony_Proto_SigningInput
public typealias HarmonySigningOutput = WalletCore.TW_Harmony_Proto_SigningOutput
public typealias HarmonyTransactionMessage = WalletCore.TW_Harmony_Proto_TransactionMessage
public typealias HarmonyStakingMessage = WalletCore.TW_Harmony_Proto_StakingMessage
public typealias HarmonyDescription = WalletCore.TW_Harmony_Proto_Description
public typealias HarmonyDecimal = WalletCore.TW_Harmony_Proto_Decimal
public typealias HarmonyCommissionRate = WalletCore.TW_Harmony_Proto_CommissionRate
public typealias HarmonyDirectiveCreateValidator = WalletCore.TW_Harmony_Proto_DirectiveCreateValidator
public typealias HarmonyDirectiveEditValidator = WalletCore.TW_Harmony_Proto_DirectiveEditValidator
public typealias HarmonyDirectiveDelegate = WalletCore.TW_Harmony_Proto_DirectiveDelegate
public typealias HarmonyDirectiveUndelegate = WalletCore.TW_Harmony_Proto_DirectiveUndelegate
public typealias HarmonyDirectiveCollectRewards = WalletCore.TW_Harmony_Proto_DirectiveCollectRewards
public struct TW_Harmony_Proto_SigningInput {
  public var chainID: Foundation.Data
  public var privateKey: Foundation.Data
  public var messageOneof: WalletCore.TW_Harmony_Proto_SigningInput.OneOf_MessageOneof?
  public var transactionMessage: WalletCore.TW_Harmony_Proto_TransactionMessage {
    get
    set
  }
  public var stakingMessage: WalletCore.TW_Harmony_Proto_StakingMessage {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_MessageOneof : Swift.Equatable {
    case transactionMessage(WalletCore.TW_Harmony_Proto_TransactionMessage)
    case stakingMessage(WalletCore.TW_Harmony_Proto_StakingMessage)
    public static func == (a: WalletCore.TW_Harmony_Proto_SigningInput.OneOf_MessageOneof, b: WalletCore.TW_Harmony_Proto_SigningInput.OneOf_MessageOneof) -> Swift.Bool
  }
  public init()
}
public struct TW_Harmony_Proto_SigningOutput {
  public var encoded: Foundation.Data
  public var v: Foundation.Data
  public var r: Foundation.Data
  public var s: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Harmony_Proto_TransactionMessage {
  public var nonce: Foundation.Data
  public var gasPrice: Foundation.Data
  public var gasLimit: Foundation.Data
  public var toAddress: Swift.String
  public var amount: Foundation.Data
  public var payload: Foundation.Data
  public var fromShardID: Foundation.Data
  public var toShardID: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Harmony_Proto_StakingMessage {
  public var stakeMsg: WalletCore.TW_Harmony_Proto_StakingMessage.OneOf_StakeMsg? {
    get
    set
  }
  public var createValidatorMessage: WalletCore.TW_Harmony_Proto_DirectiveCreateValidator {
    get
    set
  }
  public var editValidatorMessage: WalletCore.TW_Harmony_Proto_DirectiveEditValidator {
    get
    set
  }
  public var delegateMessage: WalletCore.TW_Harmony_Proto_DirectiveDelegate {
    get
    set
  }
  public var undelegateMessage: WalletCore.TW_Harmony_Proto_DirectiveUndelegate {
    get
    set
  }
  public var collectRewards: WalletCore.TW_Harmony_Proto_DirectiveCollectRewards {
    get
    set
  }
  public var nonce: Foundation.Data {
    get
    set
  }
  public var gasPrice: Foundation.Data {
    get
    set
  }
  public var gasLimit: Foundation.Data {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_StakeMsg : Swift.Equatable {
    case createValidatorMessage(WalletCore.TW_Harmony_Proto_DirectiveCreateValidator)
    case editValidatorMessage(WalletCore.TW_Harmony_Proto_DirectiveEditValidator)
    case delegateMessage(WalletCore.TW_Harmony_Proto_DirectiveDelegate)
    case undelegateMessage(WalletCore.TW_Harmony_Proto_DirectiveUndelegate)
    case collectRewards(WalletCore.TW_Harmony_Proto_DirectiveCollectRewards)
    public static func == (a: WalletCore.TW_Harmony_Proto_StakingMessage.OneOf_StakeMsg, b: WalletCore.TW_Harmony_Proto_StakingMessage.OneOf_StakeMsg) -> Swift.Bool
  }
  public init()
}
public struct TW_Harmony_Proto_Description {
  public var name: Swift.String
  public var identity: Swift.String
  public var website: Swift.String
  public var securityContact: Swift.String
  public var details: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Harmony_Proto_Decimal {
  public var value: Foundation.Data
  public var precision: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Harmony_Proto_CommissionRate {
  public var rate: WalletCore.TW_Harmony_Proto_Decimal {
    get
    set
  }
  public var hasRate: Swift.Bool {
    get
  }
  public mutating func clearRate()
  public var maxRate: WalletCore.TW_Harmony_Proto_Decimal {
    get
    set
  }
  public var hasMaxRate: Swift.Bool {
    get
  }
  public mutating func clearMaxRate()
  public var maxChangeRate: WalletCore.TW_Harmony_Proto_Decimal {
    get
    set
  }
  public var hasMaxChangeRate: Swift.Bool {
    get
  }
  public mutating func clearMaxChangeRate()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Harmony_Proto_DirectiveCreateValidator {
  public var validatorAddress: Swift.String {
    get
    set
  }
  public var description_p: WalletCore.TW_Harmony_Proto_Description {
    get
    set
  }
  public var hasDescription_p: Swift.Bool {
    get
  }
  public mutating func clearDescription_p()
  public var commissionRates: WalletCore.TW_Harmony_Proto_CommissionRate {
    get
    set
  }
  public var hasCommissionRates: Swift.Bool {
    get
  }
  public mutating func clearCommissionRates()
  public var minSelfDelegation: Foundation.Data {
    get
    set
  }
  public var maxTotalDelegation: Foundation.Data {
    get
    set
  }
  public var slotPubKeys: [Foundation.Data] {
    get
    set
  }
  public var slotKeySigs: [Foundation.Data] {
    get
    set
  }
  public var amount: Foundation.Data {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Harmony_Proto_DirectiveEditValidator {
  public var validatorAddress: Swift.String
  public var description_p: WalletCore.TW_Harmony_Proto_Description {
    get
    set
  }
  public var hasDescription_p: Swift.Bool {
    get
  }
  public mutating func clearDescription_p()
  public var commissionRate: WalletCore.TW_Harmony_Proto_Decimal {
    get
    set
  }
  public var hasCommissionRate: Swift.Bool {
    get
  }
  public mutating func clearCommissionRate()
  public var minSelfDelegation: Foundation.Data
  public var maxTotalDelegation: Foundation.Data
  public var slotKeyToRemove: Foundation.Data
  public var slotKeyToAdd: Foundation.Data
  public var slotKeyToAddSig: Foundation.Data
  public var active: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Harmony_Proto_DirectiveDelegate {
  public var delegatorAddress: Swift.String
  public var validatorAddress: Swift.String
  public var amount: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Harmony_Proto_DirectiveUndelegate {
  public var delegatorAddress: Swift.String
  public var validatorAddress: Swift.String
  public var amount: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Harmony_Proto_DirectiveCollectRewards {
  public var delegatorAddress: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_Harmony_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Harmony_Proto_SigningInput, rhs: WalletCore.TW_Harmony_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Harmony_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Harmony_Proto_SigningOutput, rhs: WalletCore.TW_Harmony_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Harmony_Proto_TransactionMessage : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Harmony_Proto_TransactionMessage, rhs: WalletCore.TW_Harmony_Proto_TransactionMessage) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Harmony_Proto_StakingMessage : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Harmony_Proto_StakingMessage, rhs: WalletCore.TW_Harmony_Proto_StakingMessage) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Harmony_Proto_Description : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Harmony_Proto_Description, rhs: WalletCore.TW_Harmony_Proto_Description) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Harmony_Proto_Decimal : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Harmony_Proto_Decimal, rhs: WalletCore.TW_Harmony_Proto_Decimal) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Harmony_Proto_CommissionRate : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Harmony_Proto_CommissionRate, rhs: WalletCore.TW_Harmony_Proto_CommissionRate) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Harmony_Proto_DirectiveCreateValidator : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Harmony_Proto_DirectiveCreateValidator, rhs: WalletCore.TW_Harmony_Proto_DirectiveCreateValidator) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Harmony_Proto_DirectiveEditValidator : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Harmony_Proto_DirectiveEditValidator, rhs: WalletCore.TW_Harmony_Proto_DirectiveEditValidator) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Harmony_Proto_DirectiveDelegate : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Harmony_Proto_DirectiveDelegate, rhs: WalletCore.TW_Harmony_Proto_DirectiveDelegate) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Harmony_Proto_DirectiveUndelegate : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Harmony_Proto_DirectiveUndelegate, rhs: WalletCore.TW_Harmony_Proto_DirectiveUndelegate) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Harmony_Proto_DirectiveCollectRewards : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Harmony_Proto_DirectiveCollectRewards, rhs: WalletCore.TW_Harmony_Proto_DirectiveCollectRewards) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct Hash {
  public static func sha1(data: Foundation.Data) -> Foundation.Data
  public static func sha256(data: Foundation.Data) -> Foundation.Data
  public static func sha512(data: Foundation.Data) -> Foundation.Data
  public static func sha512_256(data: Foundation.Data) -> Foundation.Data
  public static func keccak256(data: Foundation.Data) -> Foundation.Data
  public static func keccak512(data: Foundation.Data) -> Foundation.Data
  public static func sha3_256(data: Foundation.Data) -> Foundation.Data
  public static func sha3_512(data: Foundation.Data) -> Foundation.Data
  public static func ripemd(data: Foundation.Data) -> Foundation.Data
  public static func blake256(data: Foundation.Data) -> Foundation.Data
  public static func blake2b(data: Foundation.Data, size: Swift.Int) -> Foundation.Data
  public static func groestl512(data: Foundation.Data) -> Foundation.Data
  public static func sha256SHA256(data: Foundation.Data) -> Foundation.Data
  public static func sha256RIPEMD(data: Foundation.Data) -> Foundation.Data
  public static func sha3_256RIPEMD(data: Foundation.Data) -> Foundation.Data
  public static func blake256Blake256(data: Foundation.Data) -> Foundation.Data
  public static func blake256RIPEMD(data: Foundation.Data) -> Foundation.Data
  public static func groestl512Groestl512(data: Foundation.Data) -> Foundation.Data
}
public typealias IconSigningInput = WalletCore.TW_Icon_Proto_SigningInput
public typealias IconSigningOutput = WalletCore.TW_Icon_Proto_SigningOutput
public struct TW_Icon_Proto_SigningInput {
  public var fromAddress: Swift.String
  public var toAddress: Swift.String
  public var value: Foundation.Data
  public var stepLimit: Foundation.Data
  public var timestamp: Swift.Int64
  public var nonce: Foundation.Data
  public var networkID: Foundation.Data
  public var privateKey: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Icon_Proto_SigningOutput {
  public var encoded: Swift.String
  public var signature: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_Icon_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Icon_Proto_SigningInput, rhs: WalletCore.TW_Icon_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Icon_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Icon_Proto_SigningOutput, rhs: WalletCore.TW_Icon_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public typealias IoTeXTransfer = WalletCore.TW_IoTeX_Proto_Transfer
public typealias IoTeXStaking = WalletCore.TW_IoTeX_Proto_Staking
public typealias IoTeXContractCall = WalletCore.TW_IoTeX_Proto_ContractCall
public typealias IoTeXSigningInput = WalletCore.TW_IoTeX_Proto_SigningInput
public typealias IoTeXSigningOutput = WalletCore.TW_IoTeX_Proto_SigningOutput
public typealias IoTeXActionCore = WalletCore.TW_IoTeX_Proto_ActionCore
public typealias IoTeXAction = WalletCore.TW_IoTeX_Proto_Action
public struct TW_IoTeX_Proto_Transfer {
  public var amount: Swift.String
  public var recipient: Swift.String
  public var payload: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_IoTeX_Proto_Staking {
  public var message: WalletCore.TW_IoTeX_Proto_Staking.OneOf_Message?
  public var stakeCreate: WalletCore.TW_IoTeX_Proto_Staking.Create {
    get
    set
  }
  public var stakeUnstake: WalletCore.TW_IoTeX_Proto_Staking.Reclaim {
    get
    set
  }
  public var stakeWithdraw: WalletCore.TW_IoTeX_Proto_Staking.Reclaim {
    get
    set
  }
  public var stakeAddDeposit: WalletCore.TW_IoTeX_Proto_Staking.AddDeposit {
    get
    set
  }
  public var stakeRestake: WalletCore.TW_IoTeX_Proto_Staking.Restake {
    get
    set
  }
  public var stakeChangeCandidate: WalletCore.TW_IoTeX_Proto_Staking.ChangeCandidate {
    get
    set
  }
  public var stakeTransferOwnership: WalletCore.TW_IoTeX_Proto_Staking.TransferOwnership {
    get
    set
  }
  public var candidateRegister: WalletCore.TW_IoTeX_Proto_Staking.CandidateRegister {
    get
    set
  }
  public var candidateUpdate: WalletCore.TW_IoTeX_Proto_Staking.CandidateBasicInfo {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_Message : Swift.Equatable {
    case stakeCreate(WalletCore.TW_IoTeX_Proto_Staking.Create)
    case stakeUnstake(WalletCore.TW_IoTeX_Proto_Staking.Reclaim)
    case stakeWithdraw(WalletCore.TW_IoTeX_Proto_Staking.Reclaim)
    case stakeAddDeposit(WalletCore.TW_IoTeX_Proto_Staking.AddDeposit)
    case stakeRestake(WalletCore.TW_IoTeX_Proto_Staking.Restake)
    case stakeChangeCandidate(WalletCore.TW_IoTeX_Proto_Staking.ChangeCandidate)
    case stakeTransferOwnership(WalletCore.TW_IoTeX_Proto_Staking.TransferOwnership)
    case candidateRegister(WalletCore.TW_IoTeX_Proto_Staking.CandidateRegister)
    case candidateUpdate(WalletCore.TW_IoTeX_Proto_Staking.CandidateBasicInfo)
    public static func == (a: WalletCore.TW_IoTeX_Proto_Staking.OneOf_Message, b: WalletCore.TW_IoTeX_Proto_Staking.OneOf_Message) -> Swift.Bool
  }
  public struct Create {
    public var candidateName: Swift.String
    public var stakedAmount: Swift.String
    public var stakedDuration: Swift.UInt32
    public var autoStake: Swift.Bool
    public var payload: Foundation.Data
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct Reclaim {
    public var bucketIndex: Swift.UInt64
    public var payload: Foundation.Data
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct AddDeposit {
    public var bucketIndex: Swift.UInt64
    public var amount: Swift.String
    public var payload: Foundation.Data
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct Restake {
    public var bucketIndex: Swift.UInt64
    public var stakedDuration: Swift.UInt32
    public var autoStake: Swift.Bool
    public var payload: Foundation.Data
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct ChangeCandidate {
    public var bucketIndex: Swift.UInt64
    public var candidateName: Swift.String
    public var payload: Foundation.Data
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct TransferOwnership {
    public var bucketIndex: Swift.UInt64
    public var voterAddress: Swift.String
    public var payload: Foundation.Data
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct CandidateBasicInfo {
    public var name: Swift.String
    public var operatorAddress: Swift.String
    public var rewardAddress: Swift.String
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct CandidateRegister {
    public var candidate: WalletCore.TW_IoTeX_Proto_Staking.CandidateBasicInfo {
      get
      set
    }
    public var hasCandidate: Swift.Bool {
      get
    }
    public mutating func clearCandidate()
    public var stakedAmount: Swift.String
    public var stakedDuration: Swift.UInt32
    public var autoStake: Swift.Bool
    public var ownerAddress: Swift.String
    public var payload: Foundation.Data
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public init()
}
public struct TW_IoTeX_Proto_ContractCall {
  public var amount: Swift.String
  public var contract: Swift.String
  public var data: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_IoTeX_Proto_SigningInput {
  public var version: Swift.UInt32
  public var nonce: Swift.UInt64
  public var gasLimit: Swift.UInt64
  public var gasPrice: Swift.String
  public var privateKey: Foundation.Data
  public var action: WalletCore.TW_IoTeX_Proto_SigningInput.OneOf_Action?
  public var transfer: WalletCore.TW_IoTeX_Proto_Transfer {
    get
    set
  }
  public var call: WalletCore.TW_IoTeX_Proto_ContractCall {
    get
    set
  }
  public var stakeCreate: WalletCore.TW_IoTeX_Proto_Staking.Create {
    get
    set
  }
  public var stakeUnstake: WalletCore.TW_IoTeX_Proto_Staking.Reclaim {
    get
    set
  }
  public var stakeWithdraw: WalletCore.TW_IoTeX_Proto_Staking.Reclaim {
    get
    set
  }
  public var stakeAddDeposit: WalletCore.TW_IoTeX_Proto_Staking.AddDeposit {
    get
    set
  }
  public var stakeRestake: WalletCore.TW_IoTeX_Proto_Staking.Restake {
    get
    set
  }
  public var stakeChangeCandidate: WalletCore.TW_IoTeX_Proto_Staking.ChangeCandidate {
    get
    set
  }
  public var stakeTransferOwnership: WalletCore.TW_IoTeX_Proto_Staking.TransferOwnership {
    get
    set
  }
  public var candidateRegister: WalletCore.TW_IoTeX_Proto_Staking.CandidateRegister {
    get
    set
  }
  public var candidateUpdate: WalletCore.TW_IoTeX_Proto_Staking.CandidateBasicInfo {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_Action : Swift.Equatable {
    case transfer(WalletCore.TW_IoTeX_Proto_Transfer)
    case call(WalletCore.TW_IoTeX_Proto_ContractCall)
    case stakeCreate(WalletCore.TW_IoTeX_Proto_Staking.Create)
    case stakeUnstake(WalletCore.TW_IoTeX_Proto_Staking.Reclaim)
    case stakeWithdraw(WalletCore.TW_IoTeX_Proto_Staking.Reclaim)
    case stakeAddDeposit(WalletCore.TW_IoTeX_Proto_Staking.AddDeposit)
    case stakeRestake(WalletCore.TW_IoTeX_Proto_Staking.Restake)
    case stakeChangeCandidate(WalletCore.TW_IoTeX_Proto_Staking.ChangeCandidate)
    case stakeTransferOwnership(WalletCore.TW_IoTeX_Proto_Staking.TransferOwnership)
    case candidateRegister(WalletCore.TW_IoTeX_Proto_Staking.CandidateRegister)
    case candidateUpdate(WalletCore.TW_IoTeX_Proto_Staking.CandidateBasicInfo)
    public static func == (a: WalletCore.TW_IoTeX_Proto_SigningInput.OneOf_Action, b: WalletCore.TW_IoTeX_Proto_SigningInput.OneOf_Action) -> Swift.Bool
  }
  public init()
}
public struct TW_IoTeX_Proto_SigningOutput {
  public var encoded: Foundation.Data
  public var hash: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_IoTeX_Proto_ActionCore {
  public var version: Swift.UInt32
  public var nonce: Swift.UInt64
  public var gasLimit: Swift.UInt64
  public var gasPrice: Swift.String
  public var action: WalletCore.TW_IoTeX_Proto_ActionCore.OneOf_Action?
  public var transfer: WalletCore.TW_IoTeX_Proto_Transfer {
    get
    set
  }
  public var execution: WalletCore.TW_IoTeX_Proto_ContractCall {
    get
    set
  }
  public var stakeCreate: WalletCore.TW_IoTeX_Proto_Staking.Create {
    get
    set
  }
  public var stakeUnstake: WalletCore.TW_IoTeX_Proto_Staking.Reclaim {
    get
    set
  }
  public var stakeWithdraw: WalletCore.TW_IoTeX_Proto_Staking.Reclaim {
    get
    set
  }
  public var stakeAddDeposit: WalletCore.TW_IoTeX_Proto_Staking.AddDeposit {
    get
    set
  }
  public var stakeRestake: WalletCore.TW_IoTeX_Proto_Staking.Restake {
    get
    set
  }
  public var stakeChangeCandidate: WalletCore.TW_IoTeX_Proto_Staking.ChangeCandidate {
    get
    set
  }
  public var stakeTransferOwnership: WalletCore.TW_IoTeX_Proto_Staking.TransferOwnership {
    get
    set
  }
  public var candidateRegister: WalletCore.TW_IoTeX_Proto_Staking.CandidateRegister {
    get
    set
  }
  public var candidateUpdate: WalletCore.TW_IoTeX_Proto_Staking.CandidateBasicInfo {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_Action : Swift.Equatable {
    case transfer(WalletCore.TW_IoTeX_Proto_Transfer)
    case execution(WalletCore.TW_IoTeX_Proto_ContractCall)
    case stakeCreate(WalletCore.TW_IoTeX_Proto_Staking.Create)
    case stakeUnstake(WalletCore.TW_IoTeX_Proto_Staking.Reclaim)
    case stakeWithdraw(WalletCore.TW_IoTeX_Proto_Staking.Reclaim)
    case stakeAddDeposit(WalletCore.TW_IoTeX_Proto_Staking.AddDeposit)
    case stakeRestake(WalletCore.TW_IoTeX_Proto_Staking.Restake)
    case stakeChangeCandidate(WalletCore.TW_IoTeX_Proto_Staking.ChangeCandidate)
    case stakeTransferOwnership(WalletCore.TW_IoTeX_Proto_Staking.TransferOwnership)
    case candidateRegister(WalletCore.TW_IoTeX_Proto_Staking.CandidateRegister)
    case candidateUpdate(WalletCore.TW_IoTeX_Proto_Staking.CandidateBasicInfo)
    public static func == (a: WalletCore.TW_IoTeX_Proto_ActionCore.OneOf_Action, b: WalletCore.TW_IoTeX_Proto_ActionCore.OneOf_Action) -> Swift.Bool
  }
  public init()
}
public struct TW_IoTeX_Proto_Action {
  public var core: WalletCore.TW_IoTeX_Proto_ActionCore {
    get
    set
  }
  public var hasCore: Swift.Bool {
    get
  }
  public mutating func clearCore()
  public var senderPubKey: Foundation.Data
  public var signature: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_IoTeX_Proto_Transfer : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_IoTeX_Proto_Transfer, rhs: WalletCore.TW_IoTeX_Proto_Transfer) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_IoTeX_Proto_Staking : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_IoTeX_Proto_Staking, rhs: WalletCore.TW_IoTeX_Proto_Staking) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_IoTeX_Proto_Staking.Create : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_IoTeX_Proto_Staking.Create, rhs: WalletCore.TW_IoTeX_Proto_Staking.Create) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_IoTeX_Proto_Staking.Reclaim : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_IoTeX_Proto_Staking.Reclaim, rhs: WalletCore.TW_IoTeX_Proto_Staking.Reclaim) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_IoTeX_Proto_Staking.AddDeposit : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_IoTeX_Proto_Staking.AddDeposit, rhs: WalletCore.TW_IoTeX_Proto_Staking.AddDeposit) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_IoTeX_Proto_Staking.Restake : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_IoTeX_Proto_Staking.Restake, rhs: WalletCore.TW_IoTeX_Proto_Staking.Restake) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_IoTeX_Proto_Staking.ChangeCandidate : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_IoTeX_Proto_Staking.ChangeCandidate, rhs: WalletCore.TW_IoTeX_Proto_Staking.ChangeCandidate) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_IoTeX_Proto_Staking.TransferOwnership : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_IoTeX_Proto_Staking.TransferOwnership, rhs: WalletCore.TW_IoTeX_Proto_Staking.TransferOwnership) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_IoTeX_Proto_Staking.CandidateBasicInfo : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_IoTeX_Proto_Staking.CandidateBasicInfo, rhs: WalletCore.TW_IoTeX_Proto_Staking.CandidateBasicInfo) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_IoTeX_Proto_Staking.CandidateRegister : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_IoTeX_Proto_Staking.CandidateRegister, rhs: WalletCore.TW_IoTeX_Proto_Staking.CandidateRegister) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_IoTeX_Proto_ContractCall : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_IoTeX_Proto_ContractCall, rhs: WalletCore.TW_IoTeX_Proto_ContractCall) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_IoTeX_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_IoTeX_Proto_SigningInput, rhs: WalletCore.TW_IoTeX_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_IoTeX_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_IoTeX_Proto_SigningOutput, rhs: WalletCore.TW_IoTeX_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_IoTeX_Proto_ActionCore : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_IoTeX_Proto_ActionCore, rhs: WalletCore.TW_IoTeX_Proto_ActionCore) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_IoTeX_Proto_Action : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_IoTeX_Proto_Action, rhs: WalletCore.TW_IoTeX_Proto_Action) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.KeyStore {
  public enum Error : Swift.Error, Foundation.LocalizedError {
    case accountNotFound
    case invalidMnemonic
    case invalidJSON
    case invalidKey
    case invalidPassword
    public var errorDescription: Swift.String? {
      get
    }
    public static func == (a: WalletCore.KeyStore.Error, b: WalletCore.KeyStore.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
final public class KeyStore {
  final public let keyDirectory: Foundation.URL
  final public let watchesFile: Foundation.URL
  final public var wallets: [WalletCore.Wallet] {
    get
  }
  final public var watches: [WalletCore.Watch]
  public init(keyDirectory: Foundation.URL) throws
  final public func watch(_ watches: [WalletCore.Watch]) throws
  final public func removeWatch(_ watch: WalletCore.Watch) throws
  final public func createWallet(name: Swift.String, password: Swift.String, coins: [WalletCore.CoinType]) throws -> WalletCore.Wallet
  final public func addAccounts(wallet: WalletCore.Wallet, coins: [WalletCore.CoinType], password: Swift.String) throws -> [WalletCore.Account]
  final public func removeAccounts(wallet: WalletCore.Wallet, coins: [WalletCore.CoinType], password: Swift.String) throws -> WalletCore.Wallet
  final public func `import`(json: Foundation.Data, name: Swift.String, password: Swift.String, newPassword: Swift.String, coins: [WalletCore.CoinType]) throws -> WalletCore.Wallet
  final public func `import`(privateKey: WalletCore.PrivateKey, name: Swift.String, password: Swift.String, coin: WalletCore.CoinType) throws -> WalletCore.Wallet
  final public func `import`(mnemonic: Swift.String, name: Swift.String, encryptPassword: Swift.String, coins: [WalletCore.CoinType]) throws -> WalletCore.Wallet
  final public func export(wallet: WalletCore.Wallet, password: Swift.String, newPassword: Swift.String) throws -> Foundation.Data
  final public func exportPrivateKey(wallet: WalletCore.Wallet, password: Swift.String) throws -> Foundation.Data
  final public func exportMnemonic(wallet: WalletCore.Wallet, password: Swift.String) throws -> Swift.String
  final public func update(wallet: WalletCore.Wallet, password: Swift.String, newPassword: Swift.String) throws
  final public func update(wallet: WalletCore.Wallet, password: Swift.String, newName: Swift.String) throws
  final public func delete(wallet: WalletCore.Wallet, password: Swift.String) throws
  final public func destroy() throws
  @objc deinit
}
extension WalletCore.Mnemonic {
  public typealias ValidationResult = (word: Swift.String, index: Swift.Int)
  public static func validate(mnemonic: [Swift.String]) -> [WalletCore.Mnemonic.ValidationResult]
  public static func search(prefix: Swift.String) -> [Swift.String]
}
public struct Mnemonic {
  public static func isValid(mnemonic: Swift.String) -> Swift.Bool
  public static func isValidWord(word: Swift.String) -> Swift.Bool
  public static func suggest(prefix: Swift.String) -> Swift.String
}
public typealias NEARPublicKey = WalletCore.TW_NEAR_Proto_PublicKey
public typealias NEARFunctionCallPermission = WalletCore.TW_NEAR_Proto_FunctionCallPermission
public typealias NEARFullAccessPermission = WalletCore.TW_NEAR_Proto_FullAccessPermission
public typealias NEARAccessKey = WalletCore.TW_NEAR_Proto_AccessKey
public typealias NEARCreateAccount = WalletCore.TW_NEAR_Proto_CreateAccount
public typealias NEARDeployContract = WalletCore.TW_NEAR_Proto_DeployContract
public typealias NEARFunctionCall = WalletCore.TW_NEAR_Proto_FunctionCall
public typealias NEARTransfer = WalletCore.TW_NEAR_Proto_Transfer
public typealias NEARStake = WalletCore.TW_NEAR_Proto_Stake
public typealias NEARAddKey = WalletCore.TW_NEAR_Proto_AddKey
public typealias NEARDeleteKey = WalletCore.TW_NEAR_Proto_DeleteKey
public typealias NEARDeleteAccount = WalletCore.TW_NEAR_Proto_DeleteAccount
public typealias NEARAction = WalletCore.TW_NEAR_Proto_Action
public typealias NEARSigningInput = WalletCore.TW_NEAR_Proto_SigningInput
public typealias NEARSigningOutput = WalletCore.TW_NEAR_Proto_SigningOutput
public struct TW_NEAR_Proto_PublicKey {
  public var keyType: Swift.UInt32
  public var data: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_NEAR_Proto_FunctionCallPermission {
  public var allowance: Foundation.Data
  public var receiverID: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_NEAR_Proto_FullAccessPermission {
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_NEAR_Proto_AccessKey {
  public var nonce: Swift.UInt64
  public var permission: WalletCore.TW_NEAR_Proto_AccessKey.OneOf_Permission?
  public var functionCall: WalletCore.TW_NEAR_Proto_FunctionCallPermission {
    get
    set
  }
  public var fullAccess: WalletCore.TW_NEAR_Proto_FullAccessPermission {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_Permission : Swift.Equatable {
    case functionCall(WalletCore.TW_NEAR_Proto_FunctionCallPermission)
    case fullAccess(WalletCore.TW_NEAR_Proto_FullAccessPermission)
    public static func == (a: WalletCore.TW_NEAR_Proto_AccessKey.OneOf_Permission, b: WalletCore.TW_NEAR_Proto_AccessKey.OneOf_Permission) -> Swift.Bool
  }
  public init()
}
public struct TW_NEAR_Proto_CreateAccount {
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_NEAR_Proto_DeployContract {
  public var code: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_NEAR_Proto_FunctionCall {
  public var methodName: Foundation.Data
  public var args: Foundation.Data
  public var gas: Swift.UInt64
  public var deposit: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_NEAR_Proto_Transfer {
  public var deposit: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_NEAR_Proto_Stake {
  public var stake: Foundation.Data
  public var publicKey: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_NEAR_Proto_AddKey {
  public var publicKey: WalletCore.TW_NEAR_Proto_PublicKey {
    get
    set
  }
  public var hasPublicKey: Swift.Bool {
    get
  }
  public mutating func clearPublicKey()
  public var accessKey: WalletCore.TW_NEAR_Proto_AccessKey {
    get
    set
  }
  public var hasAccessKey: Swift.Bool {
    get
  }
  public mutating func clearAccessKey()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_NEAR_Proto_DeleteKey {
  public var publicKey: WalletCore.TW_NEAR_Proto_PublicKey {
    get
    set
  }
  public var hasPublicKey: Swift.Bool {
    get
  }
  public mutating func clearPublicKey()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_NEAR_Proto_DeleteAccount {
  public var beneficiaryID: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_NEAR_Proto_Action {
  public var payload: WalletCore.TW_NEAR_Proto_Action.OneOf_Payload?
  public var createAccount: WalletCore.TW_NEAR_Proto_CreateAccount {
    get
    set
  }
  public var deployContract: WalletCore.TW_NEAR_Proto_DeployContract {
    get
    set
  }
  public var functionCall: WalletCore.TW_NEAR_Proto_FunctionCall {
    get
    set
  }
  public var transfer: WalletCore.TW_NEAR_Proto_Transfer {
    get
    set
  }
  public var stake: WalletCore.TW_NEAR_Proto_Stake {
    get
    set
  }
  public var addKey: WalletCore.TW_NEAR_Proto_AddKey {
    get
    set
  }
  public var deleteKey: WalletCore.TW_NEAR_Proto_DeleteKey {
    get
    set
  }
  public var deleteAccount: WalletCore.TW_NEAR_Proto_DeleteAccount {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_Payload : Swift.Equatable {
    case createAccount(WalletCore.TW_NEAR_Proto_CreateAccount)
    case deployContract(WalletCore.TW_NEAR_Proto_DeployContract)
    case functionCall(WalletCore.TW_NEAR_Proto_FunctionCall)
    case transfer(WalletCore.TW_NEAR_Proto_Transfer)
    case stake(WalletCore.TW_NEAR_Proto_Stake)
    case addKey(WalletCore.TW_NEAR_Proto_AddKey)
    case deleteKey(WalletCore.TW_NEAR_Proto_DeleteKey)
    case deleteAccount(WalletCore.TW_NEAR_Proto_DeleteAccount)
    public static func == (a: WalletCore.TW_NEAR_Proto_Action.OneOf_Payload, b: WalletCore.TW_NEAR_Proto_Action.OneOf_Payload) -> Swift.Bool
  }
  public init()
}
public struct TW_NEAR_Proto_SigningInput {
  public var signerID: Swift.String
  public var nonce: Swift.UInt64
  public var receiverID: Swift.String
  public var blockHash: Foundation.Data
  public var actions: [WalletCore.TW_NEAR_Proto_Action]
  public var privateKey: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_NEAR_Proto_SigningOutput {
  public var signedTransaction: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_NEAR_Proto_PublicKey : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_NEAR_Proto_PublicKey, rhs: WalletCore.TW_NEAR_Proto_PublicKey) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_NEAR_Proto_FunctionCallPermission : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_NEAR_Proto_FunctionCallPermission, rhs: WalletCore.TW_NEAR_Proto_FunctionCallPermission) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_NEAR_Proto_FullAccessPermission : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_NEAR_Proto_FullAccessPermission, rhs: WalletCore.TW_NEAR_Proto_FullAccessPermission) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_NEAR_Proto_AccessKey : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_NEAR_Proto_AccessKey, rhs: WalletCore.TW_NEAR_Proto_AccessKey) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_NEAR_Proto_CreateAccount : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_NEAR_Proto_CreateAccount, rhs: WalletCore.TW_NEAR_Proto_CreateAccount) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_NEAR_Proto_DeployContract : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_NEAR_Proto_DeployContract, rhs: WalletCore.TW_NEAR_Proto_DeployContract) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_NEAR_Proto_FunctionCall : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_NEAR_Proto_FunctionCall, rhs: WalletCore.TW_NEAR_Proto_FunctionCall) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_NEAR_Proto_Transfer : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_NEAR_Proto_Transfer, rhs: WalletCore.TW_NEAR_Proto_Transfer) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_NEAR_Proto_Stake : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_NEAR_Proto_Stake, rhs: WalletCore.TW_NEAR_Proto_Stake) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_NEAR_Proto_AddKey : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_NEAR_Proto_AddKey, rhs: WalletCore.TW_NEAR_Proto_AddKey) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_NEAR_Proto_DeleteKey : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_NEAR_Proto_DeleteKey, rhs: WalletCore.TW_NEAR_Proto_DeleteKey) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_NEAR_Proto_DeleteAccount : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_NEAR_Proto_DeleteAccount, rhs: WalletCore.TW_NEAR_Proto_DeleteAccount) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_NEAR_Proto_Action : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_NEAR_Proto_Action, rhs: WalletCore.TW_NEAR_Proto_Action) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_NEAR_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_NEAR_Proto_SigningInput, rhs: WalletCore.TW_NEAR_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_NEAR_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_NEAR_Proto_SigningOutput, rhs: WalletCore.TW_NEAR_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class NEARAccount {
  final public var description: Swift.String {
    get
  }
  public init?(string: Swift.String)
  @objc deinit
}
public typealias NEOTransactionInput = WalletCore.TW_NEO_Proto_TransactionInput
public typealias NEOTransactionOutput = WalletCore.TW_NEO_Proto_TransactionOutput
public typealias NEOSigningInput = WalletCore.TW_NEO_Proto_SigningInput
public typealias NEOSigningOutput = WalletCore.TW_NEO_Proto_SigningOutput
public typealias NEOTransactionOutputPlan = WalletCore.TW_NEO_Proto_TransactionOutputPlan
public typealias NEOTransactionPlan = WalletCore.TW_NEO_Proto_TransactionPlan
public struct TW_NEO_Proto_TransactionInput {
  public var prevHash: Foundation.Data
  public var prevIndex: Swift.UInt32
  public var value: Swift.Int64
  public var assetID: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_NEO_Proto_TransactionOutput {
  public var assetID: Swift.String
  public var amount: Swift.Int64
  public var toAddress: Swift.String
  public var changeAddress: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_NEO_Proto_SigningInput {
  public var inputs: [WalletCore.TW_NEO_Proto_TransactionInput]
  public var outputs: [WalletCore.TW_NEO_Proto_TransactionOutput]
  public var privateKey: Foundation.Data
  public var fee: Swift.Int64
  public var gasAssetID: Swift.String
  public var gasChangeAddress: Swift.String
  public var plan: WalletCore.TW_NEO_Proto_TransactionPlan {
    get
    set
  }
  public var hasPlan: Swift.Bool {
    get
  }
  public mutating func clearPlan()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_NEO_Proto_SigningOutput {
  public var encoded: Foundation.Data
  public var error: WalletCore.TW_Common_Proto_SigningError
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_NEO_Proto_TransactionOutputPlan {
  public var amount: Swift.Int64
  public var availableAmount: Swift.Int64
  public var change: Swift.Int64
  public var assetID: Swift.String
  public var toAddress: Swift.String
  public var changeAddress: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_NEO_Proto_TransactionPlan {
  public var outputs: [WalletCore.TW_NEO_Proto_TransactionOutputPlan]
  public var inputs: [WalletCore.TW_NEO_Proto_TransactionInput]
  public var fee: Swift.Int64
  public var error: WalletCore.TW_Common_Proto_SigningError
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_NEO_Proto_TransactionInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_NEO_Proto_TransactionInput, rhs: WalletCore.TW_NEO_Proto_TransactionInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_NEO_Proto_TransactionOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_NEO_Proto_TransactionOutput, rhs: WalletCore.TW_NEO_Proto_TransactionOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_NEO_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_NEO_Proto_SigningInput, rhs: WalletCore.TW_NEO_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_NEO_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_NEO_Proto_SigningOutput, rhs: WalletCore.TW_NEO_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_NEO_Proto_TransactionOutputPlan : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_NEO_Proto_TransactionOutputPlan, rhs: WalletCore.TW_NEO_Proto_TransactionOutputPlan) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_NEO_Proto_TransactionPlan : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_NEO_Proto_TransactionPlan, rhs: WalletCore.TW_NEO_Proto_TransactionPlan) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public typealias NULSTransactionCoinFrom = WalletCore.TW_NULS_Proto_TransactionCoinFrom
public typealias NULSTransactionCoinTo = WalletCore.TW_NULS_Proto_TransactionCoinTo
public typealias NULSSignature = WalletCore.TW_NULS_Proto_Signature
public typealias NULSTransaction = WalletCore.TW_NULS_Proto_Transaction
public typealias NULSSigningInput = WalletCore.TW_NULS_Proto_SigningInput
public typealias NULSSigningOutput = WalletCore.TW_NULS_Proto_SigningOutput
public struct TW_NULS_Proto_TransactionCoinFrom {
  public var fromAddress: Swift.String
  public var assetsChainid: Swift.UInt32
  public var assetsID: Swift.UInt32
  public var idAmount: Foundation.Data
  public var nonce: Foundation.Data
  public var locked: Swift.UInt32
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_NULS_Proto_TransactionCoinTo {
  public var toAddress: Swift.String
  public var assetsChainid: Swift.UInt32
  public var assetsID: Swift.UInt32
  public var idAmount: Foundation.Data
  public var lockTime: Swift.UInt32
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_NULS_Proto_Signature {
  public var pkeyLen: Swift.UInt32
  public var publicKey: Foundation.Data
  public var sigLen: Swift.UInt32
  public var signature: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_NULS_Proto_Transaction {
  public var type: Swift.UInt32 {
    get
    set
  }
  public var timestamp: Swift.UInt32 {
    get
    set
  }
  public var remark: Swift.String {
    get
    set
  }
  public var txData: Foundation.Data {
    get
    set
  }
  public var input: WalletCore.TW_NULS_Proto_TransactionCoinFrom {
    get
    set
  }
  public var hasInput: Swift.Bool {
    get
  }
  public mutating func clearInput()
  public var output: WalletCore.TW_NULS_Proto_TransactionCoinTo {
    get
    set
  }
  public var hasOutput: Swift.Bool {
    get
  }
  public mutating func clearOutput()
  public var txSigs: WalletCore.TW_NULS_Proto_Signature {
    get
    set
  }
  public var hasTxSigs: Swift.Bool {
    get
  }
  public mutating func clearTxSigs()
  public var hash: Swift.UInt32 {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_NULS_Proto_SigningInput {
  public var privateKey: Foundation.Data
  public var from: Swift.String
  public var to: Swift.String
  public var amount: Foundation.Data
  public var chainID: Swift.UInt32
  public var idassetsID: Swift.UInt32
  public var nonce: Foundation.Data
  public var remark: Swift.String
  public var balance: Foundation.Data
  public var timestamp: Swift.UInt32
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_NULS_Proto_SigningOutput {
  public var encoded: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_NULS_Proto_TransactionCoinFrom : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_NULS_Proto_TransactionCoinFrom, rhs: WalletCore.TW_NULS_Proto_TransactionCoinFrom) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_NULS_Proto_TransactionCoinTo : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_NULS_Proto_TransactionCoinTo, rhs: WalletCore.TW_NULS_Proto_TransactionCoinTo) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_NULS_Proto_Signature : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_NULS_Proto_Signature, rhs: WalletCore.TW_NULS_Proto_Signature) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_NULS_Proto_Transaction : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_NULS_Proto_Transaction, rhs: WalletCore.TW_NULS_Proto_Transaction) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_NULS_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_NULS_Proto_SigningInput, rhs: WalletCore.TW_NULS_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_NULS_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_NULS_Proto_SigningOutput, rhs: WalletCore.TW_NULS_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public typealias NanoSigningInput = WalletCore.TW_Nano_Proto_SigningInput
public typealias NanoSigningOutput = WalletCore.TW_Nano_Proto_SigningOutput
public struct TW_Nano_Proto_SigningInput {
  public var privateKey: Foundation.Data
  public var parentBlock: Foundation.Data
  public var linkOneof: WalletCore.TW_Nano_Proto_SigningInput.OneOf_LinkOneof?
  public var linkBlock: Foundation.Data {
    get
    set
  }
  public var linkRecipient: Swift.String {
    get
    set
  }
  public var representative: Swift.String
  public var balance: Swift.String
  public var work: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_LinkOneof : Swift.Equatable {
    case linkBlock(Foundation.Data)
    case linkRecipient(Swift.String)
    public static func == (a: WalletCore.TW_Nano_Proto_SigningInput.OneOf_LinkOneof, b: WalletCore.TW_Nano_Proto_SigningInput.OneOf_LinkOneof) -> Swift.Bool
  }
  public init()
}
public struct TW_Nano_Proto_SigningOutput {
  public var signature: Foundation.Data
  public var blockHash: Foundation.Data
  public var json: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_Nano_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Nano_Proto_SigningInput, rhs: WalletCore.TW_Nano_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Nano_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Nano_Proto_SigningOutput, rhs: WalletCore.TW_Nano_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public typealias NebulasSigningInput = WalletCore.TW_Nebulas_Proto_SigningInput
public typealias NebulasSigningOutput = WalletCore.TW_Nebulas_Proto_SigningOutput
public typealias NebulasData = WalletCore.TW_Nebulas_Proto_Data
public typealias NebulasRawTransaction = WalletCore.TW_Nebulas_Proto_RawTransaction
public struct TW_Nebulas_Proto_SigningInput {
  public var fromAddress: Swift.String
  public var chainID: Foundation.Data
  public var nonce: Foundation.Data
  public var gasPrice: Foundation.Data
  public var gasLimit: Foundation.Data
  public var toAddress: Swift.String
  public var amount: Foundation.Data
  public var timestamp: Foundation.Data
  public var payload: Swift.String
  public var privateKey: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Nebulas_Proto_SigningOutput {
  public var algorithm: Swift.UInt32
  public var signature: Foundation.Data
  public var raw: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Nebulas_Proto_Data {
  public var type: Swift.String
  public var payload: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Nebulas_Proto_RawTransaction {
  public var hash: Foundation.Data
  public var from: Foundation.Data
  public var to: Foundation.Data
  public var value: Foundation.Data
  public var nonce: Swift.UInt64
  public var timestamp: Swift.Int64
  public var data: WalletCore.TW_Nebulas_Proto_Data {
    get
    set
  }
  public var hasData: Swift.Bool {
    get
  }
  public mutating func clearData()
  public var chainID: Swift.UInt32
  public var gasPrice: Foundation.Data
  public var gasLimit: Foundation.Data
  public var alg: Swift.UInt32
  public var sign: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_Nebulas_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Nebulas_Proto_SigningInput, rhs: WalletCore.TW_Nebulas_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Nebulas_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Nebulas_Proto_SigningOutput, rhs: WalletCore.TW_Nebulas_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Nebulas_Proto_Data : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Nebulas_Proto_Data, rhs: WalletCore.TW_Nebulas_Proto_Data) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Nebulas_Proto_RawTransaction : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Nebulas_Proto_RawTransaction, rhs: WalletCore.TW_Nebulas_Proto_RawTransaction) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public typealias NimiqSigningInput = WalletCore.TW_Nimiq_Proto_SigningInput
public typealias NimiqSigningOutput = WalletCore.TW_Nimiq_Proto_SigningOutput
public struct TW_Nimiq_Proto_SigningInput {
  public var privateKey: Foundation.Data
  public var destination: Swift.String
  public var value: Swift.UInt64
  public var fee: Swift.UInt64
  public var validityStartHeight: Swift.UInt32
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Nimiq_Proto_SigningOutput {
  public var encoded: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_Nimiq_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Nimiq_Proto_SigningInput, rhs: WalletCore.TW_Nimiq_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Nimiq_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Nimiq_Proto_SigningOutput, rhs: WalletCore.TW_Nimiq_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public typealias OasisTransferMessage = WalletCore.TW_Oasis_Proto_TransferMessage
public typealias OasisSigningInput = WalletCore.TW_Oasis_Proto_SigningInput
public typealias OasisSigningOutput = WalletCore.TW_Oasis_Proto_SigningOutput
public struct TW_Oasis_Proto_TransferMessage {
  public var to: Swift.String
  public var gasPrice: Swift.UInt64
  public var gasAmount: Swift.String
  public var amount: Swift.String
  public var nonce: Swift.UInt64
  public var context: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Oasis_Proto_SigningInput {
  public var privateKey: Foundation.Data
  public var message: WalletCore.TW_Oasis_Proto_SigningInput.OneOf_Message?
  public var transfer: WalletCore.TW_Oasis_Proto_TransferMessage {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_Message : Swift.Equatable {
    case transfer(WalletCore.TW_Oasis_Proto_TransferMessage)
    public static func == (a: WalletCore.TW_Oasis_Proto_SigningInput.OneOf_Message, b: WalletCore.TW_Oasis_Proto_SigningInput.OneOf_Message) -> Swift.Bool
  }
  public init()
}
public struct TW_Oasis_Proto_SigningOutput {
  public var encoded: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_Oasis_Proto_TransferMessage : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Oasis_Proto_TransferMessage, rhs: WalletCore.TW_Oasis_Proto_TransferMessage) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Oasis_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Oasis_Proto_SigningInput, rhs: WalletCore.TW_Oasis_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Oasis_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Oasis_Proto_SigningOutput, rhs: WalletCore.TW_Oasis_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public typealias OntologySigningInput = WalletCore.TW_Ontology_Proto_SigningInput
public typealias OntologySigningOutput = WalletCore.TW_Ontology_Proto_SigningOutput
public struct TW_Ontology_Proto_SigningInput {
  public var contract: Swift.String
  public var method: Swift.String
  public var ownerPrivateKey: Foundation.Data
  public var toAddress: Swift.String
  public var amount: Swift.UInt64
  public var payerPrivateKey: Foundation.Data
  public var gasPrice: Swift.UInt64
  public var gasLimit: Swift.UInt64
  public var queryAddress: Swift.String
  public var nonce: Swift.UInt32
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Ontology_Proto_SigningOutput {
  public var encoded: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_Ontology_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Ontology_Proto_SigningInput, rhs: WalletCore.TW_Ontology_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Ontology_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Ontology_Proto_SigningOutput, rhs: WalletCore.TW_Ontology_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct PBKDF2 {
  public static func hmacSha256(password: Foundation.Data, salt: Foundation.Data, iterations: Swift.UInt32, dkLen: Swift.UInt32) -> Foundation.Data?
  public static func hmacSha512(password: Foundation.Data, salt: Foundation.Data, iterations: Swift.UInt32, dkLen: Swift.UInt32) -> Foundation.Data?
}
public typealias PolkadotEra = WalletCore.TW_Polkadot_Proto_Era
public typealias PolkadotBalance = WalletCore.TW_Polkadot_Proto_Balance
public typealias PolkadotStaking = WalletCore.TW_Polkadot_Proto_Staking
public typealias PolkadotSigningInput = WalletCore.TW_Polkadot_Proto_SigningInput
public typealias PolkadotSigningOutput = WalletCore.TW_Polkadot_Proto_SigningOutput
public typealias PolkadotNetwork = WalletCore.TW_Polkadot_Proto_Network
public typealias PolkadotRewardDestination = WalletCore.TW_Polkadot_Proto_RewardDestination
public enum TW_Polkadot_Proto_Network : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case polkadot
  case kusama
  case UNRECOGNIZED(Swift.Int)
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Polkadot_Proto_Network : Swift.CaseIterable {
  public static var allCases: [WalletCore.TW_Polkadot_Proto_Network]
  public typealias AllCases = [WalletCore.TW_Polkadot_Proto_Network]
}
public enum TW_Polkadot_Proto_RewardDestination : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case staked
  case stash
  case controller
  case UNRECOGNIZED(Swift.Int)
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Polkadot_Proto_RewardDestination : Swift.CaseIterable {
  public static var allCases: [WalletCore.TW_Polkadot_Proto_RewardDestination]
  public typealias AllCases = [WalletCore.TW_Polkadot_Proto_RewardDestination]
}
public struct TW_Polkadot_Proto_Era {
  public var blockNumber: Swift.UInt64
  public var period: Swift.UInt64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Polkadot_Proto_Balance {
  public var messageOneof: WalletCore.TW_Polkadot_Proto_Balance.OneOf_MessageOneof?
  public var transfer: WalletCore.TW_Polkadot_Proto_Balance.Transfer {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_MessageOneof : Swift.Equatable {
    case transfer(WalletCore.TW_Polkadot_Proto_Balance.Transfer)
    public static func == (a: WalletCore.TW_Polkadot_Proto_Balance.OneOf_MessageOneof, b: WalletCore.TW_Polkadot_Proto_Balance.OneOf_MessageOneof) -> Swift.Bool
  }
  public struct Transfer {
    public var toAddress: Swift.String
    public var value: Foundation.Data
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public init()
}
public struct TW_Polkadot_Proto_Staking {
  public var messageOneof: WalletCore.TW_Polkadot_Proto_Staking.OneOf_MessageOneof?
  public var bond: WalletCore.TW_Polkadot_Proto_Staking.Bond {
    get
    set
  }
  public var bondAndNominate: WalletCore.TW_Polkadot_Proto_Staking.BondAndNominate {
    get
    set
  }
  public var bondExtra: WalletCore.TW_Polkadot_Proto_Staking.BondExtra {
    get
    set
  }
  public var unbond: WalletCore.TW_Polkadot_Proto_Staking.Unbond {
    get
    set
  }
  public var withdrawUnbonded: WalletCore.TW_Polkadot_Proto_Staking.WithdrawUnbonded {
    get
    set
  }
  public var nominate: WalletCore.TW_Polkadot_Proto_Staking.Nominate {
    get
    set
  }
  public var chill: WalletCore.TW_Polkadot_Proto_Staking.Chill {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_MessageOneof : Swift.Equatable {
    case bond(WalletCore.TW_Polkadot_Proto_Staking.Bond)
    case bondAndNominate(WalletCore.TW_Polkadot_Proto_Staking.BondAndNominate)
    case bondExtra(WalletCore.TW_Polkadot_Proto_Staking.BondExtra)
    case unbond(WalletCore.TW_Polkadot_Proto_Staking.Unbond)
    case withdrawUnbonded(WalletCore.TW_Polkadot_Proto_Staking.WithdrawUnbonded)
    case nominate(WalletCore.TW_Polkadot_Proto_Staking.Nominate)
    case chill(WalletCore.TW_Polkadot_Proto_Staking.Chill)
    public static func == (a: WalletCore.TW_Polkadot_Proto_Staking.OneOf_MessageOneof, b: WalletCore.TW_Polkadot_Proto_Staking.OneOf_MessageOneof) -> Swift.Bool
  }
  public struct Bond {
    public var controller: Swift.String
    public var value: Foundation.Data
    public var rewardDestination: WalletCore.TW_Polkadot_Proto_RewardDestination
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct BondAndNominate {
    public var controller: Swift.String
    public var value: Foundation.Data
    public var rewardDestination: WalletCore.TW_Polkadot_Proto_RewardDestination
    public var nominators: [Swift.String]
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct BondExtra {
    public var value: Foundation.Data
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct Unbond {
    public var value: Foundation.Data
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct WithdrawUnbonded {
    public var slashingSpans: Swift.Int32
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct Nominate {
    public var nominators: [Swift.String]
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct Chill {
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public init()
}
public struct TW_Polkadot_Proto_SigningInput {
  public var blockHash: Foundation.Data
  public var genesisHash: Foundation.Data
  public var nonce: Swift.UInt64
  public var specVersion: Swift.UInt32
  public var transactionVersion: Swift.UInt32
  public var tip: Foundation.Data
  public var era: WalletCore.TW_Polkadot_Proto_Era {
    get
    set
  }
  public var hasEra: Swift.Bool {
    get
  }
  public mutating func clearEra()
  public var privateKey: Foundation.Data
  public var network: WalletCore.TW_Polkadot_Proto_Network
  public var messageOneof: WalletCore.TW_Polkadot_Proto_SigningInput.OneOf_MessageOneof?
  public var balanceCall: WalletCore.TW_Polkadot_Proto_Balance {
    get
    set
  }
  public var stakingCall: WalletCore.TW_Polkadot_Proto_Staking {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_MessageOneof : Swift.Equatable {
    case balanceCall(WalletCore.TW_Polkadot_Proto_Balance)
    case stakingCall(WalletCore.TW_Polkadot_Proto_Staking)
    public static func == (a: WalletCore.TW_Polkadot_Proto_SigningInput.OneOf_MessageOneof, b: WalletCore.TW_Polkadot_Proto_SigningInput.OneOf_MessageOneof) -> Swift.Bool
  }
  public init()
}
public struct TW_Polkadot_Proto_SigningOutput {
  public var encoded: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_Polkadot_Proto_Network : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension WalletCore.TW_Polkadot_Proto_RewardDestination : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension WalletCore.TW_Polkadot_Proto_Era : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Polkadot_Proto_Era, rhs: WalletCore.TW_Polkadot_Proto_Era) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Polkadot_Proto_Balance : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Polkadot_Proto_Balance, rhs: WalletCore.TW_Polkadot_Proto_Balance) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Polkadot_Proto_Balance.Transfer : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Polkadot_Proto_Balance.Transfer, rhs: WalletCore.TW_Polkadot_Proto_Balance.Transfer) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Polkadot_Proto_Staking : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Polkadot_Proto_Staking, rhs: WalletCore.TW_Polkadot_Proto_Staking) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Polkadot_Proto_Staking.Bond : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Polkadot_Proto_Staking.Bond, rhs: WalletCore.TW_Polkadot_Proto_Staking.Bond) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Polkadot_Proto_Staking.BondAndNominate : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Polkadot_Proto_Staking.BondAndNominate, rhs: WalletCore.TW_Polkadot_Proto_Staking.BondAndNominate) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Polkadot_Proto_Staking.BondExtra : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Polkadot_Proto_Staking.BondExtra, rhs: WalletCore.TW_Polkadot_Proto_Staking.BondExtra) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Polkadot_Proto_Staking.Unbond : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Polkadot_Proto_Staking.Unbond, rhs: WalletCore.TW_Polkadot_Proto_Staking.Unbond) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Polkadot_Proto_Staking.WithdrawUnbonded : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Polkadot_Proto_Staking.WithdrawUnbonded, rhs: WalletCore.TW_Polkadot_Proto_Staking.WithdrawUnbonded) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Polkadot_Proto_Staking.Nominate : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Polkadot_Proto_Staking.Nominate, rhs: WalletCore.TW_Polkadot_Proto_Staking.Nominate) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Polkadot_Proto_Staking.Chill : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Polkadot_Proto_Staking.Chill, rhs: WalletCore.TW_Polkadot_Proto_Staking.Chill) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Polkadot_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Polkadot_Proto_SigningInput, rhs: WalletCore.TW_Polkadot_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Polkadot_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Polkadot_Proto_SigningOutput, rhs: WalletCore.TW_Polkadot_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class PrivateKey {
  public static func isValid(data: Foundation.Data, curve: WalletCore.Curve) -> Swift.Bool
  final public var data: Foundation.Data {
    get
  }
  public init()
  public init?(data: Foundation.Data)
  public init?(key: WalletCore.PrivateKey)
  @objc deinit
  final public func getPublicKeySecp256k1(compressed: Swift.Bool) -> WalletCore.PublicKey
  final public func getPublicKeyNist256p1() -> WalletCore.PublicKey
  final public func getPublicKeyEd25519() -> WalletCore.PublicKey
  final public func getPublicKeyEd25519Blake2b() -> WalletCore.PublicKey
  final public func getPublicKeyEd25519Extended() -> WalletCore.PublicKey
  final public func getPublicKeyCurve25519() -> WalletCore.PublicKey
  final public func getSharedKey(publicKey: WalletCore.PublicKey, curve: WalletCore.Curve) -> Foundation.Data?
  final public func sign(digest: Foundation.Data, curve: WalletCore.Curve) -> Foundation.Data?
  final public func signAsDER(digest: Foundation.Data, curve: WalletCore.Curve) -> Foundation.Data?
  final public func signSchnorr(message: Foundation.Data, curve: WalletCore.Curve) -> Foundation.Data?
}
extension WalletCore.PublicKey {
  final public var bitcoinKeyHash: Foundation.Data {
    get
  }
}
@_hasMissingDesignatedInitializers final public class PublicKey {
  public static func isValid(data: Foundation.Data, type: WalletCore.PublicKeyType) -> Swift.Bool
  public static func recover(signature: Foundation.Data, message: Foundation.Data) -> WalletCore.PublicKey?
  final public var isCompressed: Swift.Bool {
    get
  }
  final public var compressed: WalletCore.PublicKey {
    get
  }
  final public var uncompressed: WalletCore.PublicKey {
    get
  }
  final public var data: Foundation.Data {
    get
  }
  final public var keyType: WalletCore.PublicKeyType {
    get
  }
  final public var description: Swift.String {
    get
  }
  public init?(data: Foundation.Data, type: WalletCore.PublicKeyType)
  @objc deinit
  final public func verify(signature: Foundation.Data, message: Foundation.Data) -> Swift.Bool
  final public func verifyAsDER(signature: Foundation.Data, message: Foundation.Data) -> Swift.Bool
  final public func verifySchnorr(signature: Foundation.Data, message: Foundation.Data) -> Swift.Bool
}
public enum PublicKeyType : Swift.UInt32, Swift.CaseIterable {
  case secp256k1
  case secp256k1Extended
  case nist256p1
  case nist256p1Extended
  case ed25519
  case ed25519Blake2b
  case curve25519
  case ed25519Extended
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [WalletCore.PublicKeyType]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [WalletCore.PublicKeyType] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public enum Purpose : Swift.UInt32, Swift.CaseIterable {
  case bip44
  case bip49
  case bip84
  case bip1852
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [WalletCore.Purpose]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [WalletCore.Purpose] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public typealias RippleSigningInput = WalletCore.TW_Ripple_Proto_SigningInput
public typealias RippleSigningOutput = WalletCore.TW_Ripple_Proto_SigningOutput
public struct TW_Ripple_Proto_SigningInput {
  public var amount: Swift.Int64
  public var fee: Swift.Int64
  public var sequence: Swift.Int32
  public var lastLedgerSequence: Swift.Int32
  public var account: Swift.String
  public var destination: Swift.String
  public var destinationTag: Swift.Int64
  public var flags: Swift.Int64
  public var privateKey: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Ripple_Proto_SigningOutput {
  public var encoded: Foundation.Data
  public var error: WalletCore.TW_Common_Proto_SigningError
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_Ripple_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Ripple_Proto_SigningInput, rhs: WalletCore.TW_Ripple_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Ripple_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Ripple_Proto_SigningOutput, rhs: WalletCore.TW_Ripple_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class RippleXAddress : WalletCore.Address {
  public static func == (lhs: WalletCore.RippleXAddress, rhs: WalletCore.RippleXAddress) -> Swift.Bool
  public static func isValidString(string: Swift.String) -> Swift.Bool
  final public var description: Swift.String {
    get
  }
  final public var tag: Swift.UInt32 {
    get
  }
  public init?(string: Swift.String)
  public init(publicKey: WalletCore.PublicKey, tag: Swift.UInt32)
  @objc deinit
}
public enum SS58AddressType : Swift.UInt8, Swift.CaseIterable {
  case polkadot
  case kusama
  public init?(rawValue: Swift.UInt8)
  public typealias AllCases = [WalletCore.SS58AddressType]
  public typealias RawValue = Swift.UInt8
  public static var allCases: [WalletCore.SS58AddressType] {
    get
  }
  public var rawValue: Swift.UInt8 {
    get
  }
}
@_hasMissingDesignatedInitializers final public class SegwitAddress : WalletCore.Address {
  public static func == (lhs: WalletCore.SegwitAddress, rhs: WalletCore.SegwitAddress) -> Swift.Bool
  public static func isValidString(string: Swift.String) -> Swift.Bool
  final public var description: Swift.String {
    get
  }
  final public var hrp: WalletCore.HRP {
    get
  }
  final public var witnessVersion: Swift.Int32 {
    get
  }
  final public var witnessProgram: Foundation.Data {
    get
  }
  public init?(string: Swift.String)
  public init(hrp: WalletCore.HRP, publicKey: WalletCore.PublicKey)
  @objc deinit
}
public typealias SolanaTransfer = WalletCore.TW_Solana_Proto_Transfer
public typealias SolanaDelegateStake = WalletCore.TW_Solana_Proto_DelegateStake
public typealias SolanaDeactivateStake = WalletCore.TW_Solana_Proto_DeactivateStake
public typealias SolanaDeactivateAllStake = WalletCore.TW_Solana_Proto_DeactivateAllStake
public typealias SolanaWithdrawStake = WalletCore.TW_Solana_Proto_WithdrawStake
public typealias SolanaStakeAccountValue = WalletCore.TW_Solana_Proto_StakeAccountValue
public typealias SolanaWithdrawAllStake = WalletCore.TW_Solana_Proto_WithdrawAllStake
public typealias SolanaCreateTokenAccount = WalletCore.TW_Solana_Proto_CreateTokenAccount
public typealias SolanaTokenTransfer = WalletCore.TW_Solana_Proto_TokenTransfer
public typealias SolanaCreateAndTransferToken = WalletCore.TW_Solana_Proto_CreateAndTransferToken
public typealias SolanaSigningInput = WalletCore.TW_Solana_Proto_SigningInput
public typealias SolanaSigningOutput = WalletCore.TW_Solana_Proto_SigningOutput
public struct TW_Solana_Proto_Transfer {
  public var recipient: Swift.String
  public var value: Swift.UInt64
  public var memo: Swift.String
  public var references: [Swift.String]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Solana_Proto_DelegateStake {
  public var validatorPubkey: Swift.String
  public var value: Swift.UInt64
  public var stakeAccount: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Solana_Proto_DeactivateStake {
  public var stakeAccount: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Solana_Proto_DeactivateAllStake {
  public var stakeAccounts: [Swift.String]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Solana_Proto_WithdrawStake {
  public var stakeAccount: Swift.String
  public var value: Swift.UInt64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Solana_Proto_StakeAccountValue {
  public var stakeAccount: Swift.String
  public var value: Swift.UInt64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Solana_Proto_WithdrawAllStake {
  public var stakeAccounts: [WalletCore.TW_Solana_Proto_StakeAccountValue]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Solana_Proto_CreateTokenAccount {
  public var mainAddress: Swift.String
  public var tokenMintAddress: Swift.String
  public var tokenAddress: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Solana_Proto_TokenTransfer {
  public var tokenMintAddress: Swift.String
  public var senderTokenAddress: Swift.String
  public var recipientTokenAddress: Swift.String
  public var amount: Swift.UInt64
  public var decimals: Swift.UInt32
  public var memo: Swift.String
  public var references: [Swift.String]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Solana_Proto_CreateAndTransferToken {
  public var recipientMainAddress: Swift.String
  public var tokenMintAddress: Swift.String
  public var recipientTokenAddress: Swift.String
  public var senderTokenAddress: Swift.String
  public var amount: Swift.UInt64
  public var decimals: Swift.UInt32
  public var memo: Swift.String
  public var references: [Swift.String]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Solana_Proto_SigningInput {
  public var privateKey: Foundation.Data
  public var recentBlockhash: Swift.String
  public var transactionType: WalletCore.TW_Solana_Proto_SigningInput.OneOf_TransactionType?
  public var transferTransaction: WalletCore.TW_Solana_Proto_Transfer {
    get
    set
  }
  public var delegateStakeTransaction: WalletCore.TW_Solana_Proto_DelegateStake {
    get
    set
  }
  public var deactivateStakeTransaction: WalletCore.TW_Solana_Proto_DeactivateStake {
    get
    set
  }
  public var deactivateAllStakeTransaction: WalletCore.TW_Solana_Proto_DeactivateAllStake {
    get
    set
  }
  public var withdrawTransaction: WalletCore.TW_Solana_Proto_WithdrawStake {
    get
    set
  }
  public var withdrawAllTransaction: WalletCore.TW_Solana_Proto_WithdrawAllStake {
    get
    set
  }
  public var createTokenAccountTransaction: WalletCore.TW_Solana_Proto_CreateTokenAccount {
    get
    set
  }
  public var tokenTransferTransaction: WalletCore.TW_Solana_Proto_TokenTransfer {
    get
    set
  }
  public var createAndTransferTokenTransaction: WalletCore.TW_Solana_Proto_CreateAndTransferToken {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_TransactionType : Swift.Equatable {
    case transferTransaction(WalletCore.TW_Solana_Proto_Transfer)
    case delegateStakeTransaction(WalletCore.TW_Solana_Proto_DelegateStake)
    case deactivateStakeTransaction(WalletCore.TW_Solana_Proto_DeactivateStake)
    case deactivateAllStakeTransaction(WalletCore.TW_Solana_Proto_DeactivateAllStake)
    case withdrawTransaction(WalletCore.TW_Solana_Proto_WithdrawStake)
    case withdrawAllTransaction(WalletCore.TW_Solana_Proto_WithdrawAllStake)
    case createTokenAccountTransaction(WalletCore.TW_Solana_Proto_CreateTokenAccount)
    case tokenTransferTransaction(WalletCore.TW_Solana_Proto_TokenTransfer)
    case createAndTransferTokenTransaction(WalletCore.TW_Solana_Proto_CreateAndTransferToken)
    public static func == (a: WalletCore.TW_Solana_Proto_SigningInput.OneOf_TransactionType, b: WalletCore.TW_Solana_Proto_SigningInput.OneOf_TransactionType) -> Swift.Bool
  }
  public init()
}
public struct TW_Solana_Proto_SigningOutput {
  public var encoded: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_Solana_Proto_Transfer : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Solana_Proto_Transfer, rhs: WalletCore.TW_Solana_Proto_Transfer) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Solana_Proto_DelegateStake : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Solana_Proto_DelegateStake, rhs: WalletCore.TW_Solana_Proto_DelegateStake) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Solana_Proto_DeactivateStake : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Solana_Proto_DeactivateStake, rhs: WalletCore.TW_Solana_Proto_DeactivateStake) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Solana_Proto_DeactivateAllStake : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Solana_Proto_DeactivateAllStake, rhs: WalletCore.TW_Solana_Proto_DeactivateAllStake) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Solana_Proto_WithdrawStake : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Solana_Proto_WithdrawStake, rhs: WalletCore.TW_Solana_Proto_WithdrawStake) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Solana_Proto_StakeAccountValue : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Solana_Proto_StakeAccountValue, rhs: WalletCore.TW_Solana_Proto_StakeAccountValue) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Solana_Proto_WithdrawAllStake : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Solana_Proto_WithdrawAllStake, rhs: WalletCore.TW_Solana_Proto_WithdrawAllStake) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Solana_Proto_CreateTokenAccount : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Solana_Proto_CreateTokenAccount, rhs: WalletCore.TW_Solana_Proto_CreateTokenAccount) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Solana_Proto_TokenTransfer : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Solana_Proto_TokenTransfer, rhs: WalletCore.TW_Solana_Proto_TokenTransfer) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Solana_Proto_CreateAndTransferToken : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Solana_Proto_CreateAndTransferToken, rhs: WalletCore.TW_Solana_Proto_CreateAndTransferToken) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Solana_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Solana_Proto_SigningInput, rhs: WalletCore.TW_Solana_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Solana_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Solana_Proto_SigningOutput, rhs: WalletCore.TW_Solana_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class SolanaAddress : WalletCore.Address {
  final public var description: Swift.String {
    get
  }
  public init?(string: Swift.String)
  @objc deinit
  final public func defaultTokenAddress(tokenMintAddress: Swift.String) -> Swift.String?
}
public typealias StellarAsset = WalletCore.TW_Stellar_Proto_Asset
public typealias StellarOperationCreateAccount = WalletCore.TW_Stellar_Proto_OperationCreateAccount
public typealias StellarOperationPayment = WalletCore.TW_Stellar_Proto_OperationPayment
public typealias StellarOperationChangeTrust = WalletCore.TW_Stellar_Proto_OperationChangeTrust
public typealias StellarClaimant = WalletCore.TW_Stellar_Proto_Claimant
public typealias StellarOperationCreateClaimableBalance = WalletCore.TW_Stellar_Proto_OperationCreateClaimableBalance
public typealias StellarOperationClaimClaimableBalance = WalletCore.TW_Stellar_Proto_OperationClaimClaimableBalance
public typealias StellarMemoVoid = WalletCore.TW_Stellar_Proto_MemoVoid
public typealias StellarMemoText = WalletCore.TW_Stellar_Proto_MemoText
public typealias StellarMemoId = WalletCore.TW_Stellar_Proto_MemoId
public typealias StellarMemoHash = WalletCore.TW_Stellar_Proto_MemoHash
public typealias StellarSigningInput = WalletCore.TW_Stellar_Proto_SigningInput
public typealias StellarSigningOutput = WalletCore.TW_Stellar_Proto_SigningOutput
public typealias StellarClaimPredicate = WalletCore.TW_Stellar_Proto_ClaimPredicate
public enum TW_Stellar_Proto_ClaimPredicate : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case predicateUnconditional
  case UNRECOGNIZED(Swift.Int)
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Stellar_Proto_ClaimPredicate : Swift.CaseIterable {
  public static var allCases: [WalletCore.TW_Stellar_Proto_ClaimPredicate]
  public typealias AllCases = [WalletCore.TW_Stellar_Proto_ClaimPredicate]
}
public struct TW_Stellar_Proto_Asset {
  public var issuer: Swift.String
  public var alphanum4: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Stellar_Proto_OperationCreateAccount {
  public var destination: Swift.String
  public var amount: Swift.Int64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Stellar_Proto_OperationPayment {
  public var destination: Swift.String
  public var asset: WalletCore.TW_Stellar_Proto_Asset {
    get
    set
  }
  public var hasAsset: Swift.Bool {
    get
  }
  public mutating func clearAsset()
  public var amount: Swift.Int64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Stellar_Proto_OperationChangeTrust {
  public var asset: WalletCore.TW_Stellar_Proto_Asset {
    get
    set
  }
  public var hasAsset: Swift.Bool {
    get
  }
  public mutating func clearAsset()
  public var validBefore: Swift.Int64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Stellar_Proto_Claimant {
  public var account: Swift.String
  public var predicate: WalletCore.TW_Stellar_Proto_ClaimPredicate
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Stellar_Proto_OperationCreateClaimableBalance {
  public var asset: WalletCore.TW_Stellar_Proto_Asset {
    get
    set
  }
  public var hasAsset: Swift.Bool {
    get
  }
  public mutating func clearAsset()
  public var amount: Swift.Int64
  public var claimants: [WalletCore.TW_Stellar_Proto_Claimant]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Stellar_Proto_OperationClaimClaimableBalance {
  public var balanceID: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Stellar_Proto_MemoVoid {
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Stellar_Proto_MemoText {
  public var text: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Stellar_Proto_MemoId {
  public var id: Swift.Int64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Stellar_Proto_MemoHash {
  public var hash: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Stellar_Proto_SigningInput {
  public var fee: Swift.Int32
  public var sequence: Swift.Int64
  public var account: Swift.String
  public var privateKey: Foundation.Data
  public var passphrase: Swift.String
  public var operationOneof: WalletCore.TW_Stellar_Proto_SigningInput.OneOf_OperationOneof?
  public var opCreateAccount: WalletCore.TW_Stellar_Proto_OperationCreateAccount {
    get
    set
  }
  public var opPayment: WalletCore.TW_Stellar_Proto_OperationPayment {
    get
    set
  }
  public var opChangeTrust: WalletCore.TW_Stellar_Proto_OperationChangeTrust {
    get
    set
  }
  public var opCreateClaimableBalance: WalletCore.TW_Stellar_Proto_OperationCreateClaimableBalance {
    get
    set
  }
  public var opClaimClaimableBalance: WalletCore.TW_Stellar_Proto_OperationClaimClaimableBalance {
    get
    set
  }
  public var memoTypeOneof: WalletCore.TW_Stellar_Proto_SigningInput.OneOf_MemoTypeOneof?
  public var memoVoid: WalletCore.TW_Stellar_Proto_MemoVoid {
    get
    set
  }
  public var memoText: WalletCore.TW_Stellar_Proto_MemoText {
    get
    set
  }
  public var memoID: WalletCore.TW_Stellar_Proto_MemoId {
    get
    set
  }
  public var memoHash: WalletCore.TW_Stellar_Proto_MemoHash {
    get
    set
  }
  public var memoReturnHash: WalletCore.TW_Stellar_Proto_MemoHash {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_OperationOneof : Swift.Equatable {
    case opCreateAccount(WalletCore.TW_Stellar_Proto_OperationCreateAccount)
    case opPayment(WalletCore.TW_Stellar_Proto_OperationPayment)
    case opChangeTrust(WalletCore.TW_Stellar_Proto_OperationChangeTrust)
    case opCreateClaimableBalance(WalletCore.TW_Stellar_Proto_OperationCreateClaimableBalance)
    case opClaimClaimableBalance(WalletCore.TW_Stellar_Proto_OperationClaimClaimableBalance)
    public static func == (a: WalletCore.TW_Stellar_Proto_SigningInput.OneOf_OperationOneof, b: WalletCore.TW_Stellar_Proto_SigningInput.OneOf_OperationOneof) -> Swift.Bool
  }
  public enum OneOf_MemoTypeOneof : Swift.Equatable {
    case memoVoid(WalletCore.TW_Stellar_Proto_MemoVoid)
    case memoText(WalletCore.TW_Stellar_Proto_MemoText)
    case memoID(WalletCore.TW_Stellar_Proto_MemoId)
    case memoHash(WalletCore.TW_Stellar_Proto_MemoHash)
    case memoReturnHash(WalletCore.TW_Stellar_Proto_MemoHash)
    public static func == (a: WalletCore.TW_Stellar_Proto_SigningInput.OneOf_MemoTypeOneof, b: WalletCore.TW_Stellar_Proto_SigningInput.OneOf_MemoTypeOneof) -> Swift.Bool
  }
  public init()
}
public struct TW_Stellar_Proto_SigningOutput {
  public var signature: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_Stellar_Proto_ClaimPredicate : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension WalletCore.TW_Stellar_Proto_Asset : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Stellar_Proto_Asset, rhs: WalletCore.TW_Stellar_Proto_Asset) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Stellar_Proto_OperationCreateAccount : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Stellar_Proto_OperationCreateAccount, rhs: WalletCore.TW_Stellar_Proto_OperationCreateAccount) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Stellar_Proto_OperationPayment : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Stellar_Proto_OperationPayment, rhs: WalletCore.TW_Stellar_Proto_OperationPayment) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Stellar_Proto_OperationChangeTrust : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Stellar_Proto_OperationChangeTrust, rhs: WalletCore.TW_Stellar_Proto_OperationChangeTrust) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Stellar_Proto_Claimant : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Stellar_Proto_Claimant, rhs: WalletCore.TW_Stellar_Proto_Claimant) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Stellar_Proto_OperationCreateClaimableBalance : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Stellar_Proto_OperationCreateClaimableBalance, rhs: WalletCore.TW_Stellar_Proto_OperationCreateClaimableBalance) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Stellar_Proto_OperationClaimClaimableBalance : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Stellar_Proto_OperationClaimClaimableBalance, rhs: WalletCore.TW_Stellar_Proto_OperationClaimClaimableBalance) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Stellar_Proto_MemoVoid : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Stellar_Proto_MemoVoid, rhs: WalletCore.TW_Stellar_Proto_MemoVoid) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Stellar_Proto_MemoText : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Stellar_Proto_MemoText, rhs: WalletCore.TW_Stellar_Proto_MemoText) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Stellar_Proto_MemoId : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Stellar_Proto_MemoId, rhs: WalletCore.TW_Stellar_Proto_MemoId) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Stellar_Proto_MemoHash : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Stellar_Proto_MemoHash, rhs: WalletCore.TW_Stellar_Proto_MemoHash) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Stellar_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Stellar_Proto_SigningInput, rhs: WalletCore.TW_Stellar_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Stellar_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Stellar_Proto_SigningOutput, rhs: WalletCore.TW_Stellar_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum StellarMemoType : Swift.UInt32, Swift.CaseIterable {
  case none
  case text
  case id
  case hash
  case `return`
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [WalletCore.StellarMemoType]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [WalletCore.StellarMemoType] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public enum StellarPassphrase : Swift.UInt32, Swift.CaseIterable, Swift.CustomStringConvertible {
  case stellar
  case kin
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [WalletCore.StellarPassphrase]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [WalletCore.StellarPassphrase] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public enum StellarVersionByte : Swift.UInt16, Swift.CaseIterable {
  case accountID
  case seed
  case preAuthTX
  case sha256Hash
  public init?(rawValue: Swift.UInt16)
  public typealias AllCases = [WalletCore.StellarVersionByte]
  public typealias RawValue = Swift.UInt16
  public static var allCases: [WalletCore.StellarVersionByte] {
    get
  }
  public var rawValue: Swift.UInt16 {
    get
  }
}
@_hasMissingDesignatedInitializers final public class StoredKey {
  public static func load(path: Swift.String) -> WalletCore.StoredKey?
  public static func importPrivateKey(privateKey: Foundation.Data, name: Swift.String, password: Foundation.Data, coin: WalletCore.CoinType) -> WalletCore.StoredKey?
  public static func importHDWallet(mnemonic: Swift.String, name: Swift.String, password: Foundation.Data, coin: WalletCore.CoinType) -> WalletCore.StoredKey?
  public static func importJSON(json: Foundation.Data) -> WalletCore.StoredKey?
  final public var identifier: Swift.String? {
    get
  }
  final public var name: Swift.String {
    get
  }
  final public var isMnemonic: Swift.Bool {
    get
  }
  final public var accountCount: Swift.Int {
    get
  }
  final public var encryptionParameters: Swift.String? {
    get
  }
  public init(name: Swift.String, password: Foundation.Data, encryptionLevel: WalletCore.StoredKeyEncryptionLevel)
  public init(name: Swift.String, password: Foundation.Data)
  @objc deinit
  final public func account(index: Swift.Int) -> WalletCore.Account?
  final public func accountForCoin(coin: WalletCore.CoinType, wallet: WalletCore.HDWallet?) -> WalletCore.Account?
  final public func accountForCoinDerivation(coin: WalletCore.CoinType, derivation: WalletCore.Derivation, wallet: WalletCore.HDWallet?) -> WalletCore.Account?
  final public func removeAccountForCoin(coin: WalletCore.CoinType)
  final public func addAccountDerivation(address: Swift.String, coin: WalletCore.CoinType, derivation: WalletCore.Derivation, derivationPath: Swift.String, publicKey: Swift.String, extendedPublicKey: Swift.String)
  final public func addAccount(address: Swift.String, coin: WalletCore.CoinType, derivationPath: Swift.String, publicKey: Swift.String, extendedPublicKey: Swift.String)
  final public func store(path: Swift.String) -> Swift.Bool
  final public func decryptPrivateKey(password: Foundation.Data) -> Foundation.Data?
  final public func decryptMnemonic(password: Foundation.Data) -> Swift.String?
  final public func privateKey(coin: WalletCore.CoinType, password: Foundation.Data) -> WalletCore.PrivateKey?
  final public func wallet(password: Foundation.Data) -> WalletCore.HDWallet?
  final public func exportJSON() -> Foundation.Data?
  final public func fixAddresses(password: Foundation.Data) -> Swift.Bool
}
public enum StoredKeyEncryptionLevel : Swift.UInt32, Swift.CaseIterable {
  case `default`
  case minimal
  case weak
  case standard
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [WalletCore.StoredKeyEncryptionLevel]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [WalletCore.StoredKeyEncryptionLevel] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public typealias THORChainSwapError = WalletCore.TW_THORChainSwap_Proto_Error
public typealias THORChainSwapAsset = WalletCore.TW_THORChainSwap_Proto_Asset
public typealias THORChainSwapSwapInput = WalletCore.TW_THORChainSwap_Proto_SwapInput
public typealias THORChainSwapSwapOutput = WalletCore.TW_THORChainSwap_Proto_SwapOutput
public typealias THORChainSwapChain = WalletCore.TW_THORChainSwap_Proto_Chain
public typealias THORChainSwapErrorCode = WalletCore.TW_THORChainSwap_Proto_ErrorCode
public enum TW_THORChainSwap_Proto_Chain : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case thor
  case btc
  case eth
  case bnb
  case UNRECOGNIZED(Swift.Int)
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_THORChainSwap_Proto_Chain : Swift.CaseIterable {
  public static var allCases: [WalletCore.TW_THORChainSwap_Proto_Chain]
  public typealias AllCases = [WalletCore.TW_THORChainSwap_Proto_Chain]
}
public enum TW_THORChainSwap_Proto_ErrorCode : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case ok
  case errorGeneral
  case errorInputProtoDeserialization
  case errorUnsupportedFromChain
  case errorUnsupportedToChain
  case errorInvalidFromAddress
  case errorInvalidToAddress
  case errorInvalidVaultAddress
  case errorInvalidRouterAddress
  case UNRECOGNIZED(Swift.Int)
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_THORChainSwap_Proto_ErrorCode : Swift.CaseIterable {
  public static var allCases: [WalletCore.TW_THORChainSwap_Proto_ErrorCode]
  public typealias AllCases = [WalletCore.TW_THORChainSwap_Proto_ErrorCode]
}
public struct TW_THORChainSwap_Proto_Error {
  public var code: WalletCore.TW_THORChainSwap_Proto_ErrorCode
  public var message: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_THORChainSwap_Proto_Asset {
  public var chain: WalletCore.TW_THORChainSwap_Proto_Chain
  public var symbol: Swift.String
  public var tokenID: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_THORChainSwap_Proto_SwapInput {
  public var fromChain: WalletCore.TW_THORChainSwap_Proto_Chain
  public var fromAddress: Swift.String
  public var toAsset: WalletCore.TW_THORChainSwap_Proto_Asset {
    get
    set
  }
  public var hasToAsset: Swift.Bool {
    get
  }
  public mutating func clearToAsset()
  public var toAddress: Swift.String
  public var vaultAddress: Swift.String
  public var routerAddress: Swift.String
  public var fromAmount: Swift.String
  public var toAmountLimit: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_THORChainSwap_Proto_SwapOutput {
  public var fromChain: WalletCore.TW_THORChainSwap_Proto_Chain {
    get
    set
  }
  public var toChain: WalletCore.TW_THORChainSwap_Proto_Chain {
    get
    set
  }
  public var error: WalletCore.TW_THORChainSwap_Proto_Error {
    get
    set
  }
  public var hasError: Swift.Bool {
    get
  }
  public mutating func clearError()
  public var signingInputOneof: WalletCore.TW_THORChainSwap_Proto_SwapOutput.OneOf_SigningInputOneof? {
    get
    set
  }
  public var bitcoin: WalletCore.TW_Bitcoin_Proto_SigningInput {
    get
    set
  }
  public var ethereum: WalletCore.TW_Ethereum_Proto_SigningInput {
    get
    set
  }
  public var binance: WalletCore.TW_Binance_Proto_SigningInput {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_SigningInputOneof : Swift.Equatable {
    case bitcoin(WalletCore.TW_Bitcoin_Proto_SigningInput)
    case ethereum(WalletCore.TW_Ethereum_Proto_SigningInput)
    case binance(WalletCore.TW_Binance_Proto_SigningInput)
    public static func == (a: WalletCore.TW_THORChainSwap_Proto_SwapOutput.OneOf_SigningInputOneof, b: WalletCore.TW_THORChainSwap_Proto_SwapOutput.OneOf_SigningInputOneof) -> Swift.Bool
  }
  public init()
}
extension WalletCore.TW_THORChainSwap_Proto_Chain : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension WalletCore.TW_THORChainSwap_Proto_ErrorCode : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension WalletCore.TW_THORChainSwap_Proto_Error : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_THORChainSwap_Proto_Error, rhs: WalletCore.TW_THORChainSwap_Proto_Error) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_THORChainSwap_Proto_Asset : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_THORChainSwap_Proto_Asset, rhs: WalletCore.TW_THORChainSwap_Proto_Asset) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_THORChainSwap_Proto_SwapInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_THORChainSwap_Proto_SwapInput, rhs: WalletCore.TW_THORChainSwap_Proto_SwapInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_THORChainSwap_Proto_SwapOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_THORChainSwap_Proto_SwapOutput, rhs: WalletCore.TW_THORChainSwap_Proto_SwapOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct THORChainSwap {
  public static func buildSwap(input: Foundation.Data) -> Foundation.Data
}
public func TWDataCreateWithNSData(_ data: Foundation.Data) -> Swift.UnsafeRawPointer
public func TWDataNSData(_ data: Swift.UnsafeRawPointer) -> Foundation.Data
public func TWStringCreateWithNSString(_ string: Swift.String) -> Swift.UnsafeRawPointer
public func TWStringNSString(_ string: Swift.UnsafeRawPointer) -> Swift.String
public typealias TezosSigningInput = WalletCore.TW_Tezos_Proto_SigningInput
public typealias TezosSigningOutput = WalletCore.TW_Tezos_Proto_SigningOutput
public typealias TezosOperationList = WalletCore.TW_Tezos_Proto_OperationList
public typealias TezosOperation = WalletCore.TW_Tezos_Proto_Operation
public typealias TezosTransactionOperationData = WalletCore.TW_Tezos_Proto_TransactionOperationData
public typealias TezosRevealOperationData = WalletCore.TW_Tezos_Proto_RevealOperationData
public typealias TezosDelegationOperationData = WalletCore.TW_Tezos_Proto_DelegationOperationData
public struct TW_Tezos_Proto_SigningInput {
  public var operationList: WalletCore.TW_Tezos_Proto_OperationList {
    get
    set
  }
  public var hasOperationList: Swift.Bool {
    get
  }
  public mutating func clearOperationList()
  public var privateKey: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Tezos_Proto_SigningOutput {
  public var encoded: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Tezos_Proto_OperationList {
  public var branch: Swift.String
  public var operations: [WalletCore.TW_Tezos_Proto_Operation]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Tezos_Proto_Operation {
  public var counter: Swift.Int64
  public var source: Swift.String
  public var fee: Swift.Int64
  public var gasLimit: Swift.Int64
  public var storageLimit: Swift.Int64
  public var kind: WalletCore.TW_Tezos_Proto_Operation.OperationKind
  public var operationData: WalletCore.TW_Tezos_Proto_Operation.OneOf_OperationData?
  public var revealOperationData: WalletCore.TW_Tezos_Proto_RevealOperationData {
    get
    set
  }
  public var transactionOperationData: WalletCore.TW_Tezos_Proto_TransactionOperationData {
    get
    set
  }
  public var delegationOperationData: WalletCore.TW_Tezos_Proto_DelegationOperationData {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_OperationData : Swift.Equatable {
    case revealOperationData(WalletCore.TW_Tezos_Proto_RevealOperationData)
    case transactionOperationData(WalletCore.TW_Tezos_Proto_TransactionOperationData)
    case delegationOperationData(WalletCore.TW_Tezos_Proto_DelegationOperationData)
    public static func == (a: WalletCore.TW_Tezos_Proto_Operation.OneOf_OperationData, b: WalletCore.TW_Tezos_Proto_Operation.OneOf_OperationData) -> Swift.Bool
  }
  public enum OperationKind : SwiftProtobuf.Enum {
    public typealias RawValue = Swift.Int
    case endorsement
    case reveal
    case transaction
    case delegation
    case UNRECOGNIZED(Swift.Int)
    public init()
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  public init()
}
extension WalletCore.TW_Tezos_Proto_Operation.OperationKind : Swift.CaseIterable {
  public static var allCases: [WalletCore.TW_Tezos_Proto_Operation.OperationKind]
  public typealias AllCases = [WalletCore.TW_Tezos_Proto_Operation.OperationKind]
}
public struct TW_Tezos_Proto_TransactionOperationData {
  public var destination: Swift.String
  public var amount: Swift.Int64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Tezos_Proto_RevealOperationData {
  public var publicKey: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Tezos_Proto_DelegationOperationData {
  public var delegate: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_Tezos_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Tezos_Proto_SigningInput, rhs: WalletCore.TW_Tezos_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Tezos_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Tezos_Proto_SigningOutput, rhs: WalletCore.TW_Tezos_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Tezos_Proto_OperationList : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Tezos_Proto_OperationList, rhs: WalletCore.TW_Tezos_Proto_OperationList) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Tezos_Proto_Operation : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Tezos_Proto_Operation, rhs: WalletCore.TW_Tezos_Proto_Operation) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Tezos_Proto_Operation.OperationKind : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension WalletCore.TW_Tezos_Proto_TransactionOperationData : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Tezos_Proto_TransactionOperationData, rhs: WalletCore.TW_Tezos_Proto_TransactionOperationData) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Tezos_Proto_RevealOperationData : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Tezos_Proto_RevealOperationData, rhs: WalletCore.TW_Tezos_Proto_RevealOperationData) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Tezos_Proto_DelegationOperationData : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Tezos_Proto_DelegationOperationData, rhs: WalletCore.TW_Tezos_Proto_DelegationOperationData) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public typealias ThetaSigningInput = WalletCore.TW_Theta_Proto_SigningInput
public typealias ThetaSigningOutput = WalletCore.TW_Theta_Proto_SigningOutput
public struct TW_Theta_Proto_SigningInput {
  public var chainID: Swift.String
  public var toAddress: Swift.String
  public var thetaAmount: Foundation.Data
  public var tfuelAmount: Foundation.Data
  public var sequence: Swift.UInt64
  public var fee: Foundation.Data
  public var privateKey: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Theta_Proto_SigningOutput {
  public var encoded: Foundation.Data
  public var signature: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_Theta_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Theta_Proto_SigningInput, rhs: WalletCore.TW_Theta_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Theta_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Theta_Proto_SigningOutput, rhs: WalletCore.TW_Theta_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public typealias TxCompilerPreSigningOutput = WalletCore.TW_TxCompiler_Proto_PreSigningOutput
public struct TW_TxCompiler_Proto_PreSigningOutput {
  public var dataHash: Foundation.Data
  public var data: Foundation.Data
  public var error: WalletCore.TW_Common_Proto_SigningError
  public var errorMessage: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_TxCompiler_Proto_PreSigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_TxCompiler_Proto_PreSigningOutput, rhs: WalletCore.TW_TxCompiler_Proto_PreSigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct TransactionCompiler {
  public static func buildInput(coinType: WalletCore.CoinType, from: Swift.String, to: Swift.String, amount: Swift.String, asset: Swift.String, memo: Swift.String, chainId: Swift.String) -> Foundation.Data
  public static func preImageHashes(coinType: WalletCore.CoinType, txInputData: Foundation.Data) -> Foundation.Data
  public static func compileWithSignatures(coinType: WalletCore.CoinType, txInputData: Foundation.Data, signatures: WalletCore.DataVector, publicKeys: WalletCore.DataVector) -> Foundation.Data
}
public typealias TronTransferContract = WalletCore.TW_Tron_Proto_TransferContract
public typealias TronTransferAssetContract = WalletCore.TW_Tron_Proto_TransferAssetContract
public typealias TronTransferTRC20Contract = WalletCore.TW_Tron_Proto_TransferTRC20Contract
public typealias TronFreezeBalanceContract = WalletCore.TW_Tron_Proto_FreezeBalanceContract
public typealias TronUnfreezeBalanceContract = WalletCore.TW_Tron_Proto_UnfreezeBalanceContract
public typealias TronUnfreezeAssetContract = WalletCore.TW_Tron_Proto_UnfreezeAssetContract
public typealias TronVoteAssetContract = WalletCore.TW_Tron_Proto_VoteAssetContract
public typealias TronVoteWitnessContract = WalletCore.TW_Tron_Proto_VoteWitnessContract
public typealias TronWithdrawBalanceContract = WalletCore.TW_Tron_Proto_WithdrawBalanceContract
public typealias TronTriggerSmartContract = WalletCore.TW_Tron_Proto_TriggerSmartContract
public typealias TronBlockHeader = WalletCore.TW_Tron_Proto_BlockHeader
public typealias TronTransaction = WalletCore.TW_Tron_Proto_Transaction
public typealias TronSigningInput = WalletCore.TW_Tron_Proto_SigningInput
public typealias TronSigningOutput = WalletCore.TW_Tron_Proto_SigningOutput
public struct TW_Tron_Proto_TransferContract {
  public var ownerAddress: Swift.String
  public var toAddress: Swift.String
  public var amount: Swift.Int64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Tron_Proto_TransferAssetContract {
  public var assetName: Swift.String
  public var ownerAddress: Swift.String
  public var toAddress: Swift.String
  public var amount: Swift.Int64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Tron_Proto_TransferTRC20Contract {
  public var contractAddress: Swift.String
  public var ownerAddress: Swift.String
  public var toAddress: Swift.String
  public var amount: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Tron_Proto_FreezeBalanceContract {
  public var ownerAddress: Swift.String
  public var frozenBalance: Swift.Int64
  public var frozenDuration: Swift.Int64
  public var resource: Swift.String
  public var receiverAddress: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Tron_Proto_UnfreezeBalanceContract {
  public var ownerAddress: Swift.String
  public var resource: Swift.String
  public var receiverAddress: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Tron_Proto_UnfreezeAssetContract {
  public var ownerAddress: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Tron_Proto_VoteAssetContract {
  public var ownerAddress: Swift.String
  public var voteAddress: [Swift.String]
  public var support: Swift.Bool
  public var count: Swift.Int32
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Tron_Proto_VoteWitnessContract {
  public var ownerAddress: Swift.String
  public var votes: [WalletCore.TW_Tron_Proto_VoteWitnessContract.Vote]
  public var support: Swift.Bool
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public struct Vote {
    public var voteAddress: Swift.String
    public var voteCount: Swift.Int64
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public init()
}
public struct TW_Tron_Proto_WithdrawBalanceContract {
  public var ownerAddress: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Tron_Proto_TriggerSmartContract {
  public var ownerAddress: Swift.String
  public var contractAddress: Swift.String
  public var callValue: Swift.Int64
  public var data: Foundation.Data
  public var callTokenValue: Swift.Int64
  public var tokenID: Swift.Int64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Tron_Proto_BlockHeader {
  public var timestamp: Swift.Int64
  public var txTrieRoot: Foundation.Data
  public var parentHash: Foundation.Data
  public var number: Swift.Int64
  public var witnessAddress: Foundation.Data
  public var version: Swift.Int32
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Tron_Proto_Transaction {
  public var timestamp: Swift.Int64
  public var expiration: Swift.Int64
  public var blockHeader: WalletCore.TW_Tron_Proto_BlockHeader {
    get
    set
  }
  public var hasBlockHeader: Swift.Bool {
    get
  }
  public mutating func clearBlockHeader()
  public var feeLimit: Swift.Int64
  public var contractOneof: WalletCore.TW_Tron_Proto_Transaction.OneOf_ContractOneof?
  public var transfer: WalletCore.TW_Tron_Proto_TransferContract {
    get
    set
  }
  public var transferAsset: WalletCore.TW_Tron_Proto_TransferAssetContract {
    get
    set
  }
  public var freezeBalance: WalletCore.TW_Tron_Proto_FreezeBalanceContract {
    get
    set
  }
  public var unfreezeBalance: WalletCore.TW_Tron_Proto_UnfreezeBalanceContract {
    get
    set
  }
  public var unfreezeAsset: WalletCore.TW_Tron_Proto_UnfreezeAssetContract {
    get
    set
  }
  public var withdrawBalance: WalletCore.TW_Tron_Proto_WithdrawBalanceContract {
    get
    set
  }
  public var voteAsset: WalletCore.TW_Tron_Proto_VoteAssetContract {
    get
    set
  }
  public var voteWitness: WalletCore.TW_Tron_Proto_VoteWitnessContract {
    get
    set
  }
  public var triggerSmartContract: WalletCore.TW_Tron_Proto_TriggerSmartContract {
    get
    set
  }
  public var transferTrc20Contract: WalletCore.TW_Tron_Proto_TransferTRC20Contract {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_ContractOneof : Swift.Equatable {
    case transfer(WalletCore.TW_Tron_Proto_TransferContract)
    case transferAsset(WalletCore.TW_Tron_Proto_TransferAssetContract)
    case freezeBalance(WalletCore.TW_Tron_Proto_FreezeBalanceContract)
    case unfreezeBalance(WalletCore.TW_Tron_Proto_UnfreezeBalanceContract)
    case unfreezeAsset(WalletCore.TW_Tron_Proto_UnfreezeAssetContract)
    case withdrawBalance(WalletCore.TW_Tron_Proto_WithdrawBalanceContract)
    case voteAsset(WalletCore.TW_Tron_Proto_VoteAssetContract)
    case voteWitness(WalletCore.TW_Tron_Proto_VoteWitnessContract)
    case triggerSmartContract(WalletCore.TW_Tron_Proto_TriggerSmartContract)
    case transferTrc20Contract(WalletCore.TW_Tron_Proto_TransferTRC20Contract)
    public static func == (a: WalletCore.TW_Tron_Proto_Transaction.OneOf_ContractOneof, b: WalletCore.TW_Tron_Proto_Transaction.OneOf_ContractOneof) -> Swift.Bool
  }
  public init()
}
public struct TW_Tron_Proto_SigningInput {
  public var transaction: WalletCore.TW_Tron_Proto_Transaction {
    get
    set
  }
  public var hasTransaction: Swift.Bool {
    get
  }
  public mutating func clearTransaction()
  public var privateKey: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Tron_Proto_SigningOutput {
  public var id: Foundation.Data
  public var signature: Foundation.Data
  public var refBlockBytes: Foundation.Data
  public var refBlockHash: Foundation.Data
  public var json: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_Tron_Proto_TransferContract : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Tron_Proto_TransferContract, rhs: WalletCore.TW_Tron_Proto_TransferContract) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Tron_Proto_TransferAssetContract : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Tron_Proto_TransferAssetContract, rhs: WalletCore.TW_Tron_Proto_TransferAssetContract) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Tron_Proto_TransferTRC20Contract : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Tron_Proto_TransferTRC20Contract, rhs: WalletCore.TW_Tron_Proto_TransferTRC20Contract) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Tron_Proto_FreezeBalanceContract : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Tron_Proto_FreezeBalanceContract, rhs: WalletCore.TW_Tron_Proto_FreezeBalanceContract) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Tron_Proto_UnfreezeBalanceContract : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Tron_Proto_UnfreezeBalanceContract, rhs: WalletCore.TW_Tron_Proto_UnfreezeBalanceContract) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Tron_Proto_UnfreezeAssetContract : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Tron_Proto_UnfreezeAssetContract, rhs: WalletCore.TW_Tron_Proto_UnfreezeAssetContract) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Tron_Proto_VoteAssetContract : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Tron_Proto_VoteAssetContract, rhs: WalletCore.TW_Tron_Proto_VoteAssetContract) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Tron_Proto_VoteWitnessContract : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Tron_Proto_VoteWitnessContract, rhs: WalletCore.TW_Tron_Proto_VoteWitnessContract) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Tron_Proto_VoteWitnessContract.Vote : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Tron_Proto_VoteWitnessContract.Vote, rhs: WalletCore.TW_Tron_Proto_VoteWitnessContract.Vote) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Tron_Proto_WithdrawBalanceContract : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Tron_Proto_WithdrawBalanceContract, rhs: WalletCore.TW_Tron_Proto_WithdrawBalanceContract) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Tron_Proto_TriggerSmartContract : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Tron_Proto_TriggerSmartContract, rhs: WalletCore.TW_Tron_Proto_TriggerSmartContract) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Tron_Proto_BlockHeader : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Tron_Proto_BlockHeader, rhs: WalletCore.TW_Tron_Proto_BlockHeader) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Tron_Proto_Transaction : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Tron_Proto_Transaction, rhs: WalletCore.TW_Tron_Proto_Transaction) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Tron_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Tron_Proto_SigningInput, rhs: WalletCore.TW_Tron_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Tron_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Tron_Proto_SigningOutput, rhs: WalletCore.TW_Tron_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct UniversalAssetID : Swift.CustomStringConvertible, Swift.Equatable, Swift.Hashable {
  public enum Prefix : Swift.String {
    case coin
    case token
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public let coin: WalletCore.CoinType
  public let token: Swift.String
  public var description: Swift.String {
    get
  }
  public init(coin: WalletCore.CoinType, token: Swift.String = "")
  public init?(string: Swift.String)
  public static func == (a: WalletCore.UniversalAssetID, b: WalletCore.UniversalAssetID) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.UniversalAssetID : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public typealias VeChainClause = WalletCore.TW_VeChain_Proto_Clause
public typealias VeChainSigningInput = WalletCore.TW_VeChain_Proto_SigningInput
public typealias VeChainSigningOutput = WalletCore.TW_VeChain_Proto_SigningOutput
public struct TW_VeChain_Proto_Clause {
  public var to: Swift.String
  public var value: Foundation.Data
  public var data: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_VeChain_Proto_SigningInput {
  public var chainTag: Swift.UInt32
  public var blockRef: Swift.UInt64
  public var expiration: Swift.UInt32
  public var clauses: [WalletCore.TW_VeChain_Proto_Clause]
  public var gasPriceCoef: Swift.UInt32
  public var gas: Swift.UInt64
  public var dependsOn: Foundation.Data
  public var nonce: Swift.UInt64
  public var privateKey: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_VeChain_Proto_SigningOutput {
  public var encoded: Foundation.Data
  public var signature: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_VeChain_Proto_Clause : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_VeChain_Proto_Clause, rhs: WalletCore.TW_VeChain_Proto_Clause) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_VeChain_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_VeChain_Proto_SigningInput, rhs: WalletCore.TW_VeChain_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_VeChain_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_VeChain_Proto_SigningOutput, rhs: WalletCore.TW_VeChain_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
final public class Wallet : Swift.Hashable, Swift.Equatable {
  final public let identifier: Swift.String
  final public var keyURL: Foundation.URL
  final public var key: WalletCore.StoredKey
  final public var accounts: [WalletCore.Account] {
    get
  }
  public init(keyURL: Foundation.URL, key: WalletCore.StoredKey)
  final public func getAccount(password: Swift.String, coin: WalletCore.CoinType) throws -> WalletCore.Account
  final public func getAccount(password: Swift.String, coin: WalletCore.CoinType, derivation: WalletCore.Derivation) throws -> WalletCore.Account
  final public func getAccounts(password: Swift.String, coins: [WalletCore.CoinType]) throws -> [WalletCore.Account]
  final public func privateKey(password: Swift.String, coin: WalletCore.CoinType) throws -> WalletCore.PrivateKey
  final public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: WalletCore.Wallet, rhs: WalletCore.Wallet) -> Swift.Bool
  @objc deinit
  final public var hashValue: Swift.Int {
    get
  }
}
public enum WalletType {
  case encryptedKey
  case hierarchicalDeterministicWallet
  public static func == (a: WalletCore.WalletType, b: WalletCore.WalletType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum WalletError : Foundation.LocalizedError {
  case invalidKeyType
  public static func == (a: WalletCore.WalletError, b: WalletCore.WalletError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct Watch : Swift.Codable, Swift.Equatable {
  public var coin: WalletCore.CoinType
  public var name: Swift.String
  public var address: Swift.String
  public var xpub: Swift.String?
  public init(coin: WalletCore.CoinType, name: Swift.String, address: Swift.String, xpub: Swift.String?)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (a: WalletCore.Watch, b: WalletCore.Watch) -> Swift.Bool
}
public typealias WavesTransferMessage = WalletCore.TW_Waves_Proto_TransferMessage
public typealias WavesLeaseMessage = WalletCore.TW_Waves_Proto_LeaseMessage
public typealias WavesCancelLeaseMessage = WalletCore.TW_Waves_Proto_CancelLeaseMessage
public typealias WavesSigningInput = WalletCore.TW_Waves_Proto_SigningInput
public typealias WavesSigningOutput = WalletCore.TW_Waves_Proto_SigningOutput
public struct TW_Waves_Proto_TransferMessage {
  public var amount: Swift.Int64
  public var asset: Swift.String
  public var fee: Swift.Int64
  public var feeAsset: Swift.String
  public var to: Swift.String
  public var attachment: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Waves_Proto_LeaseMessage {
  public var amount: Swift.Int64
  public var to: Swift.String
  public var fee: Swift.Int64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Waves_Proto_CancelLeaseMessage {
  public var leaseID: Swift.String
  public var fee: Swift.Int64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Waves_Proto_SigningInput {
  public var timestamp: Swift.Int64
  public var privateKey: Foundation.Data
  public var messageOneof: WalletCore.TW_Waves_Proto_SigningInput.OneOf_MessageOneof?
  public var transferMessage: WalletCore.TW_Waves_Proto_TransferMessage {
    get
    set
  }
  public var leaseMessage: WalletCore.TW_Waves_Proto_LeaseMessage {
    get
    set
  }
  public var cancelLeaseMessage: WalletCore.TW_Waves_Proto_CancelLeaseMessage {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_MessageOneof : Swift.Equatable {
    case transferMessage(WalletCore.TW_Waves_Proto_TransferMessage)
    case leaseMessage(WalletCore.TW_Waves_Proto_LeaseMessage)
    case cancelLeaseMessage(WalletCore.TW_Waves_Proto_CancelLeaseMessage)
    public static func == (a: WalletCore.TW_Waves_Proto_SigningInput.OneOf_MessageOneof, b: WalletCore.TW_Waves_Proto_SigningInput.OneOf_MessageOneof) -> Swift.Bool
  }
  public init()
}
public struct TW_Waves_Proto_SigningOutput {
  public var signature: Foundation.Data
  public var json: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_Waves_Proto_TransferMessage : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Waves_Proto_TransferMessage, rhs: WalletCore.TW_Waves_Proto_TransferMessage) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Waves_Proto_LeaseMessage : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Waves_Proto_LeaseMessage, rhs: WalletCore.TW_Waves_Proto_LeaseMessage) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Waves_Proto_CancelLeaseMessage : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Waves_Proto_CancelLeaseMessage, rhs: WalletCore.TW_Waves_Proto_CancelLeaseMessage) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Waves_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Waves_Proto_SigningInput, rhs: WalletCore.TW_Waves_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Waves_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Waves_Proto_SigningOutput, rhs: WalletCore.TW_Waves_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public typealias ZilliqaTransaction = WalletCore.TW_Zilliqa_Proto_Transaction
public typealias ZilliqaSigningInput = WalletCore.TW_Zilliqa_Proto_SigningInput
public typealias ZilliqaSigningOutput = WalletCore.TW_Zilliqa_Proto_SigningOutput
public struct TW_Zilliqa_Proto_Transaction {
  public var messageOneof: WalletCore.TW_Zilliqa_Proto_Transaction.OneOf_MessageOneof?
  public var transfer: WalletCore.TW_Zilliqa_Proto_Transaction.Transfer {
    get
    set
  }
  public var rawTransaction: WalletCore.TW_Zilliqa_Proto_Transaction.Raw {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_MessageOneof : Swift.Equatable {
    case transfer(WalletCore.TW_Zilliqa_Proto_Transaction.Transfer)
    case rawTransaction(WalletCore.TW_Zilliqa_Proto_Transaction.Raw)
    public static func == (a: WalletCore.TW_Zilliqa_Proto_Transaction.OneOf_MessageOneof, b: WalletCore.TW_Zilliqa_Proto_Transaction.OneOf_MessageOneof) -> Swift.Bool
  }
  public struct Transfer {
    public var amount: Foundation.Data
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct Raw {
    public var amount: Foundation.Data
    public var code: Foundation.Data
    public var data: Foundation.Data
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public init()
}
public struct TW_Zilliqa_Proto_SigningInput {
  public var version: Swift.UInt32
  public var nonce: Swift.UInt64
  public var to: Swift.String
  public var gasPrice: Foundation.Data
  public var gasLimit: Swift.UInt64
  public var privateKey: Foundation.Data
  public var transaction: WalletCore.TW_Zilliqa_Proto_Transaction {
    get
    set
  }
  public var hasTransaction: Swift.Bool {
    get
  }
  public mutating func clearTransaction()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Zilliqa_Proto_SigningOutput {
  public var signature: Foundation.Data
  public var json: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_Zilliqa_Proto_Transaction : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Zilliqa_Proto_Transaction, rhs: WalletCore.TW_Zilliqa_Proto_Transaction) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Zilliqa_Proto_Transaction.Transfer : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Zilliqa_Proto_Transaction.Transfer, rhs: WalletCore.TW_Zilliqa_Proto_Transaction.Transfer) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Zilliqa_Proto_Transaction.Raw : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Zilliqa_Proto_Transaction.Raw, rhs: WalletCore.TW_Zilliqa_Proto_Transaction.Raw) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Zilliqa_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Zilliqa_Proto_SigningInput, rhs: WalletCore.TW_Zilliqa_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Zilliqa_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Zilliqa_Proto_SigningOutput, rhs: WalletCore.TW_Zilliqa_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.AESPaddingMode : Swift.Equatable {}
extension WalletCore.AESPaddingMode : Swift.Hashable {}
extension WalletCore.AESPaddingMode : Swift.RawRepresentable {}
extension WalletCore.BitcoinSigHashType : Swift.Equatable {}
extension WalletCore.BitcoinSigHashType : Swift.Hashable {}
extension WalletCore.BitcoinSigHashType : Swift.RawRepresentable {}
extension WalletCore.Blockchain : Swift.Equatable {}
extension WalletCore.Blockchain : Swift.Hashable {}
extension WalletCore.Blockchain : Swift.RawRepresentable {}
extension WalletCore.CoinType : Swift.Equatable {}
extension WalletCore.CoinType : Swift.Hashable {}
extension WalletCore.CoinType : Swift.RawRepresentable {}
extension WalletCore.Curve : Swift.Equatable {}
extension WalletCore.Curve : Swift.Hashable {}
extension WalletCore.Curve : Swift.RawRepresentable {}
extension WalletCore.Derivation : Swift.Equatable {}
extension WalletCore.Derivation : Swift.Hashable {}
extension WalletCore.Derivation : Swift.RawRepresentable {}
extension WalletCore.EthereumChainID : Swift.Equatable {}
extension WalletCore.EthereumChainID : Swift.Hashable {}
extension WalletCore.EthereumChainID : Swift.RawRepresentable {}
extension WalletCore.HDVersion : Swift.Equatable {}
extension WalletCore.HDVersion : Swift.Hashable {}
extension WalletCore.HDVersion : Swift.RawRepresentable {}
extension WalletCore.HRP : Swift.Equatable {}
extension WalletCore.HRP : Swift.Hashable {}
extension WalletCore.HRP : Swift.RawRepresentable {}
extension WalletCore.KeyStore.Error : Swift.Equatable {}
extension WalletCore.KeyStore.Error : Swift.Hashable {}
extension WalletCore.PublicKeyType : Swift.Equatable {}
extension WalletCore.PublicKeyType : Swift.Hashable {}
extension WalletCore.PublicKeyType : Swift.RawRepresentable {}
extension WalletCore.Purpose : Swift.Equatable {}
extension WalletCore.Purpose : Swift.Hashable {}
extension WalletCore.Purpose : Swift.RawRepresentable {}
extension WalletCore.SS58AddressType : Swift.Equatable {}
extension WalletCore.SS58AddressType : Swift.Hashable {}
extension WalletCore.SS58AddressType : Swift.RawRepresentable {}
extension WalletCore.StellarMemoType : Swift.Equatable {}
extension WalletCore.StellarMemoType : Swift.Hashable {}
extension WalletCore.StellarMemoType : Swift.RawRepresentable {}
extension WalletCore.StellarPassphrase : Swift.Equatable {}
extension WalletCore.StellarPassphrase : Swift.Hashable {}
extension WalletCore.StellarPassphrase : Swift.RawRepresentable {}
extension WalletCore.StellarVersionByte : Swift.Equatable {}
extension WalletCore.StellarVersionByte : Swift.Hashable {}
extension WalletCore.StellarVersionByte : Swift.RawRepresentable {}
extension WalletCore.StoredKeyEncryptionLevel : Swift.Equatable {}
extension WalletCore.StoredKeyEncryptionLevel : Swift.Hashable {}
extension WalletCore.StoredKeyEncryptionLevel : Swift.RawRepresentable {}
extension WalletCore.UniversalAssetID.Prefix : Swift.Equatable {}
extension WalletCore.UniversalAssetID.Prefix : Swift.Hashable {}
extension WalletCore.UniversalAssetID.Prefix : Swift.RawRepresentable {}
extension WalletCore.WalletType : Swift.Equatable {}
extension WalletCore.WalletType : Swift.Hashable {}
extension WalletCore.WalletError : Swift.Equatable {}
extension WalletCore.WalletError : Swift.Hashable {}
